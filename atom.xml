<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lancy's Blog]]></title>
  <link href="http://gracelancy.com/atom.xml" rel="self"/>
  <link href="http://gracelancy.com/"/>
  <updated>2014-04-22T16:49:20+08:00</updated>
  <id>http://gracelancy.com/</id>
  <author>
    <name><![CDATA[Lancy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Toll-Free Bridging]]></title>
    <link href="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/"/>
    <updated>2014-04-21T13:44:00+08:00</updated>
    <id>http://gracelancy.com/blog/2014/04/21/toll-free-bridging</id>
    <content type="html"><![CDATA[<h2>什么是 Toll-Free Bridging</h2>

<p>有一些数据类型是能够在 Core Foundation Framework 和 Foundation Framework 之间交换使用的。这意味着，对于同一个数据类型，你既可以将其作为参数传入 Core Foundation 函数，也可以将其作为接收者对其发送 Objective-C 消息（即调用ObjC类方法）。这种在 Core Foundation 和 Foundation 之间交换使用数据类型的技术就叫 Toll-Free Bridging.</p>

<p>举例说明，<code>NSString</code>和<code>CFStringRef</code>即是一对可以相互转换的数据类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// ARC 环境下</span>
</span><span class='line'><span class="c1">// Bridging from ObjC to CF</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">hello</span> <span class="o">=</span> <span class="s">@&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">world</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">CFStringGetLength</span><span class="p">(</span><span class="n">world</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bridging from CF to ObjC</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">CFStringCreateWithCString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">kCFStringEncodingUTF8</span><span class="p">);</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">world</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%ld&quot;</span><span class="p">,</span> <span class="n">world</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">hello</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>大部分（但不是所有！）Core Foundation 和 Foundation 的数据类型可以使用这个技术相互转换，Apple 的文档里有一个列表（<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html">传送门</a>），列出了支持这项技术的数据类型。</p>

<p>MRC 下的 Toll-Free Bridging 因为不涉及内存管理的转移，可以直接相互 bridge 而不必使用类似<code>__bridge</code>修饰字，我们之后再讨论这个问题。</p>

<h2>Toll-Free Bridging 是如何实现的？</h2>

<h4>1.</h4>

<p>每一个能够 bridge 的 ObjC 类，都是一个<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html#//apple_ref/doc/uid/TP40010810-CH4-SW1">类簇（class cluster）</a>。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该 ObjC 类相对应的 Core Foundation 类的内存结构，正好与类簇的其中一个私有子类相同。</p>

<p>举个例子，<code>NSString</code>是一个类簇，一个公开的抽象类，但每次创建一个<code>NSString</code>的实例时，实际上我们会获得其中一个私有子类的实例。而<code>NSString</code>的其中一个私有子类实现既为<code>NSCFString</code>，其内存的结构与<code>CFString</code>是相同的，<code>CFString</code>的<code>isa</code>指针就指向<code>NSCFString</code>类，即，<code>CFString</code>对象就是一个<code>NSCFString</code>类的实例。</p>

<p>所以，当<code>NSString</code>的实现刚好是<code>NSCFString</code>的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。</p>

<h4>2.</h4>

<p>当<code>NSString</code>的实现不是<code>NSCFString</code>的时候（比如我们自己 subclass 了<code>NSString</code>），我们调用 CF 函数，就需要先检查对象的具体实现。如果发现其不是<code>NSCFString</code>，我们不会调用 CF 函数的实现来获得结果，而是通过给对象发送与函数功能相对应的 ObjC 消息（调用相对应的<code>NSString</code>的接口）来获得其结果。</p>

<p>例如<code>CFStringGetLength</code>函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是<code>NSCFString</code>实现。如果是的话，就会直接调用<code>CFStringGetLength</code>函数的实现来获得字符串的长度；如果不是的话，会给对象发送<code>length</code>消息（调用<code>NSString</code>的<code>- (NSUInteger)length</code>接口），来得到字符串的长度。</p>

<p>通过这样的技术，即使是我们自己子类了一个<code>NSString</code>，也可以和<code>CFStringRef</code>相互 Bridge。</p>

<h4>3.</h4>

<p>其他支持 Toll-Free Bridging 的数据类型原理也同<code>NSString</code>一样，比如<code>NSNumber</code>的<code>NSCFNumber</code>和<code>CFNumber</code>。</p>

<h2>ARC 下的 Toll-Free Bridging</h2>

<p>如之前提到的，MRC 下的 Toll－Free Bridging 因为不涉及内存管理的转移，相互之间可以直接交换使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// bridge</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nsStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">cfStr</span><span class="p">;</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">cfStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFStringRef</span><span class="p">)</span><span class="n">nsStr</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 调用函数或者方法</span>
</span><span class='line'><span class="n">NSUInteger</span> <span class="n">length</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">cfStr</span> <span class="n">length</span><span class="p">];</span>
</span><span class='line'><span class="n">NSUInteger</span> <span class="n">length</span> <span class="o">=</span> <span class="n">CFStringGetLength</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="n">nsStr</span><span class="p">);</span>
</span><span class='line'><span class="c1">// release</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="n">nsStr</span><span class="p">);</span>
</span><span class='line'><span class="p">[(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">cfStr</span> <span class="n">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在 ARC 下，事情就会变得复杂一些，因为 ARC 能够管理 Objective-C 对象的内存，却不能管理 CF 对象，CF 对象依然需要我们手动管理内存。在 CF 和 ObjC 之间 bridge 对象的时候，问题就出现了，编译器不知道该如何处理这个同时有 ObjC 指针和 CFTypeRef 指向的对象。</p>

<p>这时候，我们需要使用<code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code> 修饰符来告诉编译器该如何去做。</p>

<h3>__bridge</h3>

<p>最常用的修饰符，这意味着告诉编译器不做任何内存管理的事情，编译器仍然负责管理好在 Objc 一端的引用计数的事情，开发者也继续负责管理好在 CF 一端的事情。举例说明：</p>

<h4>例子1</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// objc to cf</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nsStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">createSomeNSString</span><span class="p">];</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="o">*</span><span class="n">cfStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">nsStr</span><span class="p">;</span>
</span><span class='line'><span class="n">CFUseCFString</span><span class="p">(</span><span class="n">cfStr</span><span class="p">);</span>
</span><span class='line'><span class="c1">// CFRelease(cfStr); 不需要</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，编译器会继续负责<code>nsStr</code>的内存管理的事情，不会在 bridge 的时候 retain 对象，所以也不需要开发者在 CF 一端释放。需要注意的是，当<code>nsStr</code>被释放的时候（比如出了作用域），意味着<code>cfStr</code>指向的对象被释放了，这时如果继续使用<code>cfStr</code>将会引起程序崩溃。</p>

<h4>例子2</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// cf to objc</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">CFStringCreateWithCString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">kCFStringEncodingUTF8</span><span class="p">);</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">world</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">hello</span><span class="p">);</span> <span class="c1">// 需要</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">useNSString:</span><span class="n">world</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，bridge 的时候编译器不会做任何内存管理的事情，bridge 之后，会负责 ObjC 一端的内存管理的事情 。同时，开发者需要负责管理 CF 一端的内存管理的事情，需要再 bridge 之后，负责 release 对象。</p>

<h3>__bridge_retained</h3>

<p>接<code>__bridge</code>一节的第一个例子，objc to cf。为了防止<code>nsStr</code>被释放，引起我们使用<code>cfStr</code>的时候程序崩溃，可以使用<code>__bridge_retained</code>修饰符。这意味着，在 bridge 的时候，编译器会 retain 对象，而由开发者在 CF 一端负责 release。这样，就算<code>nsStr</code>在 objc 一端被释放，只要开发者不手动去释放<code>cfStr</code>，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// objc to cf</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nsStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">createSomeNSString</span><span class="p">];</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="o">*</span><span class="n">cfStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">nsStr</span><span class="p">;</span>
</span><span class='line'><span class="n">CFUseCFString</span><span class="p">(</span><span class="n">cfStr</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">cfStr</span><span class="p">);</span> <span class="c1">// 需要</span>
</span></code></pre></td></tr></table></div></figure>


<h3>__bridge_transfer</h3>

<p>接<code>__bridge</code>一节的第二个例子，cf to objc。我们发现如果使用<code>__bridge</code>修饰符在cf转objc的时候非常的麻烦，我们既需要一个<code>CFTypeRef</code>的变量，还需要在 bridge 之后负责释放。这时我们可以使用<code>__bridge_transfer</code>，意味着在 bridge 的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// cf to objc</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">CFStringCreateWithCString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">kCFStringEncodingUTF8</span><span class="p">);</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">world</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'><span class="c1">// CFRelease(hello); 不需要</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">useNSString:</span><span class="n">world</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至可以这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// cf to objc</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">world</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFStringCreateWithCString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">kCFStringEncodingUTF8</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">useNSString:</span><span class="n">world</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>小结</h3>

<ul>
<li><code>(__bridge T) op</code>：告诉编译器在 bridge 的时候不要做任何事情</li>
<li><code>(__bridge_retained T) op</code>：（ ObjC 转 CF 的时候使用）告诉编译器在 bridge 的时候 retain 对象，开发者需要在CF一端负责释放对象</li>
<li><code>(__bridge_transfer T) op</code>：（ CF 转 ObjC 的时候使用）告诉编译器转移 CF 对象的所有权，开发者不再需要在CF一端负责释放对象</li>
</ul>


<h2>联系我</h2>

<p>水平有限，若有任何关于该文章的疑问或者指正，欢迎和我讨论</p>

<ul>
<li>写邮件：lancy1014#gmail.com</li>
<li>关注我的<a href="http://weibo.com/lancy1014/">微博</a></li>
<li>Fo我的<a href="http://github.com/lancy">Github</a></li>
<li>在这里写评论留言</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html">Concepts in Objective-C Programming</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/corefoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html#//apple_ref/doc/uid/TP40010677">Core Foundation Design Concepts</a></li>
<li><a href="https://mikeash.com/pyblog/friday-qa-2010-01-22-toll-free-bridging-internals.html">Toll Free Bridging Internals</a></li>
<li><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#bridged-casts">Clang documentation: Objective-C Automatic Reference Counting (ARC)</a></li>
</ul>


<p>Lancy</p>

<p>4.21</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何做一个Letterpress拼词器]]></title>
    <link href="http://gracelancy.com/blog/2013/10/19/WordHacker/"/>
    <updated>2013-10-19T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/10/19/WordHacker</id>
    <content type="html"><![CDATA[<p><img src="http://gracelancy.com/assets/post/wordhacker0.png" alt="Drawing" style="width: 200px;"/></p>

<h2>故事</h2>

<p>哥哥家的猫咪有一天迷上了风靡全球的拼词游戏Letterpress，但是贪吃的小猫咪只认识“food”和“milk”这样的词语，所以经常被对面的玩家欺负。可怜的小猫咪向哥哥求助：“喵呜~哥哥~哥哥，他欺负我！”，于是充满爱心和正义感的哥哥就踏上了拯救猫咪的道路。</p>

<p><img src="http://gracelancy.com/assets/post/wordhacker1.jpg" alt="image" /></p>

<h2>开始拯救世界</h2>

<p>唔，我们马上来做一个自动拼词器，拼词器必须实现这样的功能：</p>

<ol>
<li>猫咪只需要选择一张游戏截图，拼词器能自动识别游戏提供的字母。（记住：小喵掌是用不了键盘的哦</li>
<li>拼词器根据识别出来的字母，自动拼出所有可能的单词，并按长度由长到短排序显示。（小猫咪就能方便的挑选单词啦</li>
</ol>


<p>有了这样的工具，连猫咪都能玩拼词游戏啦！</p>

<p>全部的代码在Github开源托管：<a href="https://github.com/lancy/letterfun">点这里</a></p>

<h2>正式的开始</h2>

<p>我们会使用到Xcode5，并创建一个iOS7的应用。我将用到CoreGraph来做图像处理，你需要一些图像处理的基本常识，一些C语言的能力以及一点内存管理的知识。</p>

<p>现在开始吧！</p>

<p>首先创建一个新的Xcode工程，模板选择单页面即可，名字就叫LetterFun（或者任何你和你的猫咪喜欢的名字），设备选择iPhone，其他的选项让你家猫咪决定。</p>

<p>接下来创建一个继承自<code>NSObject</code>的类<code>CYLetterManager</code>，我们将用它来识别游戏截图里面的字母。在头文件加上这些方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CYLetterManager.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CYLetterManager</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span><span class="p">;</span>           <span class="err">\\</span> <span class="mi">1</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">trainingWihtAlphabets:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">array</span><span class="p">;</span> <span class="err">\\</span> <span class="mi">2</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">ocrAlphabets</span><span class="p">;</span>                      <span class="err">\\</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>我们假定一个<code>CYLetterManager</code>的实例只处理一个图片，所以我们使用一个<code>initWithImage:</code>的方法，来确保需要我们处理的图片总是被事先载入。</li>
<li><code>trainingWihtAlphabets:</code>是一个训练方法，我们人工载入识别后的字母来让其进行训练，以提供后续字母识别的样本。</li>
<li><code>ocrAlphabets</code>从图片里识别字母。</li>
</ol>


<p>接着开始实现<code>CYLetterManager</code>。首先申明一些需要使用的变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// CYLetterManager.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">CYLetterManager</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="o">*</span><span class="n">_tagImageRefs</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">_image</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="o">*</span><span class="n">_needProcessImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>_image</code>是我们从<code>initWithImage:</code>里初始化得到的图像，其他两个变量，我会在后面用到的时候解释。</p>

<p>实现初始化方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_image</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">getNeedProcessImages</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着实现<code>getNeedProcessImages</code>，这个方法用来将原图片切分为25个字母的小块，并存入<code>_needProcessImage</code>数组内。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getNeedProcessImages</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1</span>
</span><span class='line'>  <span class="n">CGImageRef</span> <span class="n">originImageRef</span> <span class="o">=</span> <span class="p">[</span><span class="n">_image</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CGImageRef</span> <span class="n">alphabetsRegionImageRef</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">originImageRef</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">originImageRef</span><span class="p">)</span> <span class="o">-</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="mi">640</span><span class="p">));</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">640</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">640</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">blockWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="mf">5.0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">blockHeight</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="mf">5.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2 create image blocks</span>
</span><span class='line'>  <span class="n">CGImageRef</span> <span class="o">*</span><span class="n">imagesRefs</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">25</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">CGRect</span> <span class="n">alphabetRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="n">blockWidth</span><span class="p">,</span> <span class="n">i</span> <span class="o">*</span> <span class="n">blockHeight</span><span class="p">,</span> <span class="n">blockWidth</span><span class="p">,</span> <span class="n">blockHeight</span><span class="p">);</span>
</span><span class='line'>          <span class="n">CGImageRef</span> <span class="n">alphabetImageRef</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">alphabetsRegionImageRef</span><span class="p">,</span> <span class="n">alphabetRect</span><span class="p">);</span>
</span><span class='line'>          <span class="n">imagesRefs</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">alphabetImageRef</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3 transform to binaryImage</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">25</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">CGImageRef</span> <span class="n">binaryImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">createBinaryCGImageFromCGImage:</span><span class="n">imagesRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">CGImageRelease</span><span class="p">(</span><span class="n">imagesRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">imagesRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">binaryImage</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4</span>
</span><span class='line'>  <span class="n">_needProcessImage</span> <span class="o">=</span> <span class="n">imagesRefs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CGImageRelease</span><span class="p">(</span><span class="n">alphabetsRegionImageRef</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>我们观察游戏截图，发现字母所在的区域在下方的640 * 640。我们使用<code>CGImageCreateWithImageInRect</code>函数创建了<code>alphabetsRegionImageRef</code>。注意：你需要使用<code>CGImageRelease</code>来release这个对象（函数最后一行），而<code>originImageRef</code>是由<code>UIImage</code>的<code>CGImage</code>方法获得的，你并不持有它，故而不需要release。</li>
<li>我们把<code>alphabetsRegionImageRef</code>裁剪成了25个小的方块，暂时存在<code>imagesRefs</code>数组。</li>
<li>彩色图片包含的信息太多，为了方便我们后续的处理，我们将得到的字母小方块进行二值化。注意：这里我们使用了自定义的函数<code>createBinaryCGImageFromCGImage</code>创建了一个二值化的image，再将其替换到数组里前，需要将数组里存在的旧对象release。</li>
<li>最后我们将<code>imagesRefs</code>赋值给<code>_needProcessImage</code>，并release不需要imageRef。</li>
</ol>


<p>再来看如何进行图像二值化，先将这几个常数加到<code>initWithImage:</code>方法的上面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">BLUE</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">ALPHA</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后来实现<code>createBinaryCGImageFromCGImage</code>方法，从这里开始我们将涉及到像素的操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nf">createBinaryCGImageFromCGImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRef</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">width</span> <span class="o">=</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">imageRef</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSInteger</span> <span class="n">height</span> <span class="o">=</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">imageRef</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CGRect</span> <span class="n">imageRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1</span>
</span><span class='line'>  <span class="n">UInt32</span> <span class="o">*</span><span class="n">pixels</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt32</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">));</span>
</span><span class='line'>  <span class="n">CGColorSpaceRef</span> <span class="n">colorSpace</span> <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">();</span>
</span><span class='line'>  <span class="n">CGContextRef</span> <span class="n">contextA</span> <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">pixels</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">width</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">),</span> <span class="n">colorSpace</span><span class="p">,</span> <span class="n">kCGBitmapByteOrder32Big</span> <span class="o">|</span> <span class="n">kCGImageAlphaPremultipliedLast</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">contextA</span><span class="p">,</span> <span class="n">imageRect</span><span class="p">,</span> <span class="n">imageRef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">UInt8</span> <span class="o">*</span><span class="n">rgbaPixel</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pixels</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">x</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSInteger</span> <span class="n">r</span> <span class="o">=</span> <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">RED</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSInteger</span> <span class="n">g</span> <span class="o">=</span> <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">GREEN</span><span class="p">];</span>
</span><span class='line'>          <span class="n">NSInteger</span> <span class="n">b</span> <span class="o">=</span> <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">BLUE</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">+</span> <span class="n">g</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">RED</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">GREEN</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">BLUE</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">RED</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">GREEN</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">rgbaPixel</span><span class="p">[</span><span class="n">BLUE</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3</span>
</span><span class='line'>  <span class="n">CGImageRef</span> <span class="n">result</span> <span class="o">=</span> <span class="n">CGBitmapContextCreateImage</span><span class="p">(</span><span class="n">contextA</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">contextA</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">colorSpace</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">pixels</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>使用<code>CGBitmapContextCreate</code>创建了一个 bitmap graphics context，并将 pixels 设为其 data pointer，再将 image 绘制到 context 上，这样我们可以通过操作 pixels 来直接操作 context 的数据。该方法的其他参数可以参考文档，参数会影响数据，在这里请先使用我提供的参数。</li>
<li>我们遍历了图像的每个像素点对每个点进行二值化，二值化有许多种算法，大体分为固定阀值和自适应阀值两类。这里我们观察待处理图片可知，我们需要提取的字母部分是明显的黑色，这样使用固定的阀值255，即可顺利将其提取，而有颜色的部分会被剔除。</li>
<li>使用<code>CGBitmapContextCreateImage</code>来从context创建处理后的图片，并清理数据。</li>
</ol>


<p>注意：由于c没有autorelease池，你应当在函数（方法）的命名上使用create(或copy)来提醒使用者应当负责 release 对象。</p>

<p>至此，我们已经完成了字母方块的提取和二值化。为了防止我们没出问题，来检查一下成果。</p>

<ol>
<li>将一张游戏截图&#8221;sample.png&#8221;拖进Xcode proj内。</li>
<li>在<code>CYViewController</code>的<code>viewDidLoad</code>里使用该图片实例化一个<code>CYLetterManager</code>。</li>
<li>在<code>CYLetterManager</code>的<code>getNeedProcessImages</code>里的任意地方加上断点，可以是二值化前后，也可以是切小字母块前后。</li>
<li>运行！然后隆重介绍Xcode5的新功能之一，快速预览，当当当当！</li>
</ol>


<p>以本文最开始的截图为例：</p>

<p><img src="http://gracelancy.com/assets/post/wordhacker2.png" alt="image" /></p>

<p>可以看到我们已经成功的截出了第一个字母，并把其转为二值化图片。</p>

<h2>下一步</h2>

<p>载入了需要的图片和进行了预处理之后，我们来进行识别的前奏：获得识别用的样本。为此我们实现 <code>trainingWihtAlphabets</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">trainingWihtAlphabets:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">array</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">25</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">self</span> <span class="nl">writeImage:</span><span class="n">_needProcessImage</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="nl">withAlphabet:</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">prepareTagImageRefs</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法接受一个字母数组，里面应该包含着，我们之前载入图片里的，从左到右，从上到下的字母队列。比如<code>@[@"t", @"e", @"j", ... , @"h"]</code>;</p>

<p>我们使用 <code>writeImage:withAlphabet:</code> 方法，将该图片设为标准样本，写入到文件中。读写 <code>CGImageRef</code> 的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">@</span><span class="n">import</span> <span class="n">ImageIO</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">import</span> <span class="n">MobileCoreServices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">pathStringWithAlphabet:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">alphabet</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">imageName</span> <span class="o">=</span> <span class="p">[</span><span class="n">alphabet</span> <span class="nl">stringByAppendingString:</span><span class="s">@&quot;.png&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="s">@&quot;~/Documents&quot;</span> <span class="n">stringByExpandingTildeInPath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="nl">stringByAppendingString:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;/%@&quot;</span><span class="p">,</span> <span class="n">imageName</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">path</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nf">createImageWithAlphabet:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">alphabet</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">pathStringWithAlphabet:</span><span class="n">alphabet</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">createImageFromFile:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nf">createImageFromFile:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFURLRef</span> <span class="n">url</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFURLRef</span><span class="p">)[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGDataProviderRef</span> <span class="n">dataProvider</span> <span class="o">=</span> <span class="n">CGDataProviderCreateWithURL</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">image</span> <span class="o">=</span> <span class="n">CGImageCreateWithPNGDataProvider</span><span class="p">(</span><span class="n">dataProvider</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="n">kCGRenderingIntentDefault</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGDataProviderRelease</span><span class="p">(</span><span class="n">dataProvider</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">writeImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRef</span> <span class="nf">withAlphabet:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">alphabet</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">pathStringWithAlphabet:</span><span class="n">alphabet</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">writeImage:</span><span class="n">imageRef</span> <span class="nl">toFile:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">writeImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRef</span> <span class="nf">toFile:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CFURLRef</span> <span class="n">url</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFURLRef</span><span class="p">)[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGImageDestinationRef</span> <span class="n">destination</span> <span class="o">=</span> <span class="n">CGImageDestinationCreateWithURL</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">kUTTypePNG</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGImageDestinationAddImage</span><span class="p">(</span><span class="n">destination</span><span class="p">,</span> <span class="n">imageRef</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">CGImageDestinationFinalize</span><span class="p">(</span><span class="n">destination</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Failed to write image to %@&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">destination</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>prepareTagImageRefs</code> 方法将磁盘里保存的样本图片摘出来，存在_tagImageRefs数组里面，用于之后的比对。实现如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareTagImageRefs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_tagImageRefs</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">26</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">alpha</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,</span> <span class="n">ch</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_tagImageRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">createImageWithAlphabet:</span><span class="n">alpha</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_tagImageRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Need sample: %c&quot;</span><span class="p">,</span> <span class="n">ch</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将 <code>[self prepareTagImageRefs]</code> 加到 <code>initWitImage:</code> 方法里面，这样我们每次实例化的时候，都会自动从磁盘里读取标记好的样本图片。</p>

<p><strong>非常需要注意的是</strong>：我们添加dealloc方法（用惯了arc的开发者可能会不习惯），但这是c，是需要我们自己管理内存的。在dealloc里面释放我们的成员变量吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_tagImageRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGImageRelease</span><span class="p">(</span><span class="n">_tagImageRefs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">_tagImageRefs</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">25</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGImageRelease</span><span class="p">(</span><span class="n">_needProcessImage</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">_needProcessImage</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们需要载入足够多的包含了26个英文字母的sample图片，做好训练，将26个样品图片就都裁剪好的存入磁盘啦！（哥哥写不动了，训练代码在CYViewController里面，翻到最下面看源码啦）</p>

<h2>识别字母！</h2>

<p>OCR技术从最早的模式匹配，到现在流行的特征提取，有各种各样的方法。我们这里不搞那么复杂，而使用最简单粗暴的像素比对。即我们之前将其转化为二值化图像了之后，直接比对两个图片相同的像素点比例即可。</p>

<p>我们使用标记过的<code>_tagImageRefs</code>作为比对样本，将要识别的图像与26个标准样本进行比对，当相似度大于某个阀值的时候，我们即判定其为某个字母，实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">ocrCGImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRef</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGImageRef</span> <span class="n">tagImage</span> <span class="o">=</span> <span class="n">_tagImageRefs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tagImage</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">similarity</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">similarityBetweenCGImage:</span><span class="n">imageRef</span> <span class="nl">andCGImage:</span><span class="n">tagImage</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">similarity</span> <span class="o">&gt;</span> <span class="mf">0.92</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span> <span class="o">+</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">alpha</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,</span> <span class="n">ch</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">alpha</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// suppose imageRefA has same size with imageRefB</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">similarityBetweenCGImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRefA</span> <span class="nf">andCGImage:</span><span class="p">(</span><span class="n">CGImageRef</span><span class="p">)</span><span class="nv">imageRefB</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">similarity</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">width</span> <span class="o">=</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">imageRefA</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">height</span> <span class="o">=</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">imageRefA</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">imageRect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UInt32</span> <span class="o">*</span><span class="n">pixelsOfImageA</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt32</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">));</span>
</span><span class='line'>    <span class="n">UInt32</span> <span class="o">*</span><span class="n">pixelsOfImageB</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt32</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CGColorSpaceRef</span> <span class="n">colorSpace</span> <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">();</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">contextA</span> <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">pixelsOfImageA</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">width</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">),</span> <span class="n">colorSpace</span><span class="p">,</span> <span class="n">kCGBitmapByteOrder32Big</span> <span class="o">|</span> <span class="n">kCGImageAlphaPremultipliedLast</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">contextB</span> <span class="o">=</span> <span class="n">CGBitmapContextCreate</span><span class="p">(</span><span class="n">pixelsOfImageB</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">width</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">UInt32</span><span class="p">),</span> <span class="n">colorSpace</span><span class="p">,</span> <span class="n">kCGBitmapByteOrder32Big</span> <span class="o">|</span> <span class="n">kCGImageAlphaPremultipliedLast</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">contextA</span><span class="p">,</span> <span class="n">imageRect</span><span class="p">,</span> <span class="n">imageRefA</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">contextB</span><span class="p">,</span> <span class="n">imageRect</span><span class="p">,</span> <span class="n">imageRefB</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">similarPixelCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">allStrokePixelCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UInt8</span> <span class="o">*</span><span class="n">rgbaPixelA</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pixelsOfImageA</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">x</span><span class="p">];</span>
</span><span class='line'>            <span class="n">UInt8</span> <span class="o">*</span><span class="n">rgbaPixelB</span> <span class="o">=</span> <span class="p">(</span><span class="n">UInt8</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pixelsOfImageB</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">x</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">rgbaPixelA</span><span class="p">[</span><span class="n">RED</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">allStrokePixelCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">rgbaPixelA</span><span class="p">[</span><span class="n">RED</span><span class="p">]</span> <span class="o">==</span> <span class="n">rgbaPixelB</span><span class="p">[</span><span class="n">RED</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">similarPixelCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">similarity</span> <span class="o">=</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">similarPixelCount</span> <span class="o">/</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">allStrokePixelCount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">colorSpace</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">contextA</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRelease</span><span class="p">(</span><span class="n">contextB</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">pixelsOfImageA</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">pixelsOfImageB</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">similarity</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了上面两个识别的方法，我们再实现<code>ocrAlphabets</code>方法就很容易了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">ocrAlphabets</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">alphabets</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithCapacity:</span><span class="mi">25</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">25</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">alphabet</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">ocrCGImage:</span><span class="n">_needProcessImage</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">alphabet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">alphabets</span> <span class="nl">addObject:</span><span class="n">alphabet</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">alphabets</span> <span class="nl">addObject:</span><span class="s">@&quot;unknown&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">alphabets</span> <span class="n">copy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>开始拼词</h2>

<p>首先，我们需要准备一个词典。你可以在Unix（或者Unix-like）的系统里找到words.txt这个文件，他一般存在 <code>/usr/share/dict/words, or /usr/dict/words</code></p>

<p>将这个文件拷贝出来，并添加到我们的工程里。我们将创建一个 <code>CYWordHacker</code> 类来做拼词的事情，实现传入一组字符，返回所有合法单词按长度降序排列的数组的接口，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">CYWordHacker</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">getAllValidWordWithAlphabets:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">alphabets</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体实现从略，可参照源码。</p>

<h2>界面</h2>

<p>做成下面这样就可以了：</p>

<p><img src="http://gracelancy.com/assets/post/wordhacker3.png" alt="image" /></p>

<p>界面细节大家就去看源码吧~写不动了~哥哥要和猫咪玩乐去了~</p>

<h2>最终成品</h2>

<p>全部的代码在Github开源托管：<a href="https://github.com/lancy/letterfun">点这里</a></p>

<p><img src="http://gracelancy.com/assets/post/wordhacker4.png" alt="Drawing" style="width: 200px;"/>
<img src="http://gracelancy.com/assets/post/wordhacker5.png" alt="Drawing" style="width: 200px;"/></p>

<h2>还有一件事</h2>

<p>这个东西其实到这里并不是就完了，我们将图片二值化后其实去掉了图片的很多信息，比如当前游戏的状态。有兴趣的筒子，可以根据字块的颜色，来识别出游戏的状态，写出更智能更强力拼词器。实现诸如：占有更多对方的格子或者做出最大的block区域等强力功能，甚至求出最优解策略。这就涉及到人工智能的领域啦。</p>

<h2>联系我</h2>

<ul>
<li>写邮件：lancy1014#gmail.com</li>
<li>关注我的<a href="http://weibo.com/lancy1014/">微博</a></li>
<li>Fo我的<a href="http://github.com/lancy">Github</a></li>
<li>在这里写评论留言</li>
</ul>


<p>Lancy</p>

<p>20 Oct.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa中的位与位运算]]></title>
    <link href="http://gracelancy.com/blog/2013/09/27/bitwise-operation-in-cocoa/"/>
    <updated>2013-09-27T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/09/27/bitwise-operation-in-cocoa</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>位操作是程序设计中对位模式或二进制数的一元和二元操作. 在许多古老的微处理器上, 位运算比加减运算略快, 通常位运算比乘除法运算要快很多. 在现代架构中, 情况并非如此:位运算的运算速度通常与加法运算相同(仍然快于乘法运算).（摘自wikipedia）</p>

<p>OC作为c的扩展和超集，位运算自然使用的是c的操作符。c提供了6个位操作符，$，|，^，~，&lt;&lt;，>>。本文不打算做位运算的基础教学，只介绍一些开发中能用到的场景。</p>

<h2>提高运算速度</h2>

<p>如前一段所说，位运算的运算速度是通常与加法速度相当，但是快于乘法运算的。故而如果我们的程序对性能有要求，我们可以使用位运算来提高运算速度。比如：</p>

<ul>
<li>乘以2：n &lt;&lt; 1;</li>
<li>除以2：n >> 1;</li>
<li>乘以2的m次方：n &lt;&lt; m;</li>
<li>除以2的m次方：n >> m;</li>
<li>判断奇偶：(n &amp; 1) == 1;</li>
<li>求平均数：(a + b) >> 1;</li>
<li>&hellip;&hellip;</li>
</ul>


<p>基于乘除法的位运算提速还有很多，这里不一一列举。需要注意的是，你应当只在遇到性能瓶颈的时候，并且瓶颈的确是计算的时候才这么做。因为使用位运算并不利于程序的可读性和可维护性。（科学计算除外）</p>

<h2>压缩空间</h2>

<p>以前接触过ACM的筒子们应该对状态压缩不陌生，状态压缩的目的在于把一个大数据用有限的内存空间来进行表示。比如 Programming Pearls 里面的一个经典示例：如何对最多有一千万条不重复的7位整数（电话号码）进行排序？且可使用的内存空间有大约1MB多。</p>

<p>显而易见的常规做法既是做一个基于磁盘操作的外排序。然而如果转换一下思路，充分的使用内存中的每一个位，加上不存在重复的电话号码，以及不存在0和1开头的电话号码。我们只需要使用1000万个位（大约1.2mb），就能以集合的方式在内存里标记下所有的数据，从而轻松的实现位排序。此种方法大幅度的减少了IO时间，从而获得巨大的性能提升。</p>

<p>ACM里面有大量的如果使用位来压缩空间的示例，状态压缩的动态规划等，此处不做展开，只告诉读者，充分的使用内存的每一个位，经常能带来意想不到的收获。但需要注意的是，状态的压缩和提取，都需要一定的计算量，有时一味的追求状态压缩，反而会降低效率。</p>

<h2>表示数据</h2>

<p>比较经典的一个应用场景，使用一串24位的十六机制数字来表现一个RGB颜色（或者32位来表示ARGB）。由于PS，Web以及各类取色器，都能快速的取出RGB的Hex值，但是UIColor没有对应的方法。故而我们可以写出下面这样一个UIColor的Category，来快速的用一个RGBHex生成一个UIColor。（源码在<a href="http://github.com/lancy/cyhelper">UIColor + CYHelper.h</a>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nf">colorWithRGBHex:</span><span class="p">(</span><span class="n">UInt32</span><span class="p">)</span><span class="nv">hex</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRGBHex:</span><span class="n">hex</span> <span class="nl">alpha:</span><span class="mf">1.0f</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nf">colorWithRGBHex:</span><span class="p">(</span><span class="n">UInt32</span><span class="p">)</span><span class="nv">hex</span> <span class="nf">alpha:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">alpha</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="p">(</span><span class="n">hex</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">hex</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="n">r</span> <span class="o">/</span> <span class="mf">255.0f</span> <span class="nl">green:</span><span class="n">g</span> <span class="o">/</span> <span class="mf">255.0f</span> <span class="nl">blue:</span><span class="n">b</span> <span class="o">/</span> <span class="mf">255.0f</span> <span class="nl">alpha:</span><span class="n">alpha</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>状态与选项</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">UIViewAnimationOptions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionLayoutSubviews</span>            <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionAllowUserInteraction</span>      <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">1</span><span class="p">,</span> <span class="c1">// turn on user interaction while animating</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionBeginFromCurrentState</span>     <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">2</span><span class="p">,</span> <span class="c1">// start all views from current value, not initial value</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionRepeat</span>                    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">3</span><span class="p">,</span> <span class="c1">// repeat animation indefinitely</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionAutoreverse</span>               <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">4</span><span class="p">,</span> <span class="c1">// if repeat, run animation back and forth</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionOverrideInheritedDuration</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">5</span><span class="p">,</span> <span class="c1">// ignore nested duration</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionOverrideInheritedCurve</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">6</span><span class="p">,</span> <span class="c1">// ignore nested curve</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionAllowAnimatedContent</span>      <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">7</span><span class="p">,</span> <span class="c1">// animate contents (applies to transitions only)</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionShowHideTransitionViews</span>   <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">8</span><span class="p">,</span> <span class="c1">// flip to/from hidden state instead of adding/removing</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionOverrideInheritedOptions</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span>  <span class="mi">9</span><span class="p">,</span> <span class="c1">// do not inherit any options or animation type</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIViewAnimationOptionCurveEaseInOut</span>            <span class="o">=</span> <span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">,</span> <span class="c1">// default</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionCurveEaseIn</span>               <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionCurveEaseOut</span>              <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionCurveLinear</span>               <span class="o">=</span> <span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionNone</span>            <span class="o">=</span> <span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span> <span class="c1">// default</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionFlipFromLeft</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionFlipFromRight</span>   <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionCurlUp</span>          <span class="o">=</span> <span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionCurlDown</span>        <span class="o">=</span> <span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionCrossDissolve</span>   <span class="o">=</span> <span class="mi">5</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionFlipFromTop</span>     <span class="o">=</span> <span class="mi">6</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="n">UIViewAnimationOptionTransitionFlipFromBottom</span>  <span class="o">=</span> <span class="mi">7</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">4</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们观察Apple在UIViewAnimationOptions的枚举变量，使用了一个NSUInteger就表示了UIViewAnimation所需的所有Option。其中0~9十个是互不影响的可同时存在option。16~19，20~24使用了4位来表示互斥的option。</p>

<p>如此定义了之后，对UIViewAnimationOptions的赋值变得尤为简单，使用 | 操作符既可以获得一个给对应的option位赋值后的结果。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">1.0</span>
</span><span class='line'>                      <span class="nl">delay:</span><span class="mi">0</span>
</span><span class='line'>                    <span class="nl">options:</span><span class="n">UIViewAnimationOptionAllowUserInteraction</span>
</span><span class='line'>                         <span class="o">|</span> <span class="n">UIViewAnimationOptionBeginFromCurrentState</span>
</span><span class='line'>                         <span class="o">|</span> <span class="n">UIViewAnimationOptionCurveEaseIn</span>
</span><span class='line'>                 <span class="nl">animations:</span><span class="p">{...}</span>
</span><span class='line'>                 <span class="nl">completion:</span><span class="p">{...}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>提取也比较简单，使用 &amp; 操作符 和 >> 操作符，就可以轻松判定某个位有没有被设置，以及提取某些状态位，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIViewAnimationOptions</span> <span class="n">option</span> <span class="o">=</span> <span class="n">UIViewAnimationOptionAllowUserInteraction</span>
</span><span class='line'>                                <span class="o">|</span> <span class="n">UIViewAnimationOptionBeginFromCurrentState</span>
</span><span class='line'>                                <span class="o">|</span> <span class="n">UIViewAnimationOptionCurveEaseIn</span>
</span><span class='line'>                                <span class="o">|</span> <span class="n">UIViewAnimationOptionTransitionCrossDissolve</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">option</span> <span class="o">&amp;</span> <span class="n">UIViewAnimationOptionAllowUserInteraction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;UIViewAnimationOptionAllowUserInteraction has been set&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">option</span> <span class="o">&amp;</span> <span class="n">UIViewAnimationOptionBeginFromCurrentState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;UIViewAnimationOptionBeginFromCurrentState has been set&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">UInt8</span> <span class="n">optionCurve</span> <span class="o">=</span> <span class="n">option</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">optionCurve</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;UIViewAnimationOptionCurveEaseIn has been set&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">UInt8</span> <span class="n">optionTransition</span> <span class="o">=</span> <span class="n">option</span> <span class="o">&gt;&gt;</span> <span class="mi">20</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">optionTransition</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;UIViewAnimationOptionTransitionCrossDissolve has been set&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里最需要注意的地方就是，对互斥的状态的设置必须尤为小心，如果你这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIViewAnimationOptions</span> <span class="n">badOption</span> <span class="o">=</span> <span class="n">UIViewAnimationOptionCurveEaseIn</span> <span class="o">|</span> <span class="n">UIViewAnimationOptionCurveEaseOut</span><span class="p">;</span>
</span><span class='line'><span class="n">UInt8</span> <span class="n">oops</span> <span class="o">=</span> <span class="n">badOption</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Sorry, it&#39;s not UIViewAnimationOptionCurveEaseInOut&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;oops = %d, you got UIViewAnimationOptionCurveLinear&quot;</span><span class="p">,</span> <span class="n">oops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>联系我</h2>

<ul>
<li>写邮件：lancy1014#gmail.com</li>
<li>关注我的<a href="http://weibo.com/lancy1014/">微博</a></li>
<li>Fo我的<a href="http://github.com/lancy">Github</a></li>
<li>在这里写评论留言</li>
</ul>


<p>Lancy</p>

<p>9.27</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作自己的CocoaPods spec]]></title>
    <link href="http://gracelancy.com/blog/2013/08/11/make-your-own-cocoapods-spec/"/>
    <updated>2013-08-11T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/08/11/make-your-own-cocoapods-spec</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>关于CocoaPods，相信不用我介绍更多了。本文主要介绍如何制作自己的CocoaPods spec。</p>

<h2>步骤</h2>

<ol>
<li>首先你要会用git，还要有一个托管在云端的repo，本文以Github为例，Git和Github的使用方式参照<a href="http://github.com/help">Github Help</a></li>
<li><p>在你的repo下面，使用Git的tag功能，给你的某个commit添加一个tag(比如1.1.0），并push到Github.</p>

<pre><code> // 本地添加一个标签:
 $ git tag -a 1.1.0 -m "Version 1.1.0 Stable"
 // Push tag to GitHub:
 $ git push --tags
</code></pre></li>
<li><p>Folk <a href="https://github.com/CocoaPods/Specs">CocoaPods/Specs</a> 并 Clone 到本地。</p></li>
<li><p>在Clone下来的Specs/创建一个自己的spec的目录，再创建一个版本目录。比如：</p>

<pre><code> Specs/CYHelper/1.1.0
</code></pre></li>
<li><p>在该目录下创建一个spec档案，并编辑：</p>

<pre><code> $ pod spec create CYHelper
 $ vi CYHelper.podspec
</code></pre>

<p> pod创建模板会有相关的说明，按指引一步一步填即可。例如，CYHelper的spec配置如下:</p>

<pre><code> Pod::Spec.new do |s|
   s.name         = "CYHelper"
   s.version      = "1.1.0"
   s.summary      = "CYHelper is an Objective-C library for iOS developers."
   s.homepage     = "https://github.com/lancy/CYHelper"
   s.license      = 'MIT (LICENSE)'
   s.author       = { "lancy" =&gt; "lancy1014@gmail.com" }
   s.source       = { :git =&gt; "https://github.com/lancy/CYHelper.git", :tag =&gt; "1.1.0" }
   s.platform     = :ios, '5.0'

   s.source_files = 'CYHelper', 'CYHelper/**/*.{h,m}'
   s.exclude_files = 'CYHelperDemo'

   s.frameworks = 'Foundation', 'CoreGraphics', 'UIKit'
   s.requires_arc = true
 end
</code></pre></li>
<li><p>验证podspec</p>

<pre><code> pod spec lint CYHelper.podspec        
</code></pre>

<p> 如果验证成功的话，会有这样的提示</p>

<pre><code> Analyzed 1 podspec.

 CYHelper.podspec passed validation.
</code></pre></li>
<li><p>最后去Github上发一个PullRequest，等待一段时间的审核和Merge，之后就可以像别的pod那样用CocoaPods来管理了：</p>

<pre><code> // Podfile
 platform :ios, '6.0'
 pod 'CYHelper' 

 $ pod install       
</code></pre></li>
</ol>


<p>Have Fun!</p>

<h2>后注</h2>

<ul>
<li><a href="https://github.com/lancy/cyhelper">CYHelper在这里，欢迎试用</a></li>
<li><a href="https://github.com/lancy">顺便求fo我的github</a></li>
</ul>


<p>这里有唐巧和王轲写的两篇相关的文章，可以作为扩展阅读：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">使用CocoaPods来做iOS程序的包依赖管理</a></li>
<li><a href="http://www.iwangke.me/2013/04/18/advanced-cocoapods/">CocoaPods进阶：本地包管理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singletons in Cocoa, are they evil?]]></title>
    <link href="http://gracelancy.com/blog/2013/06/04/singletons-in-cocoa-are-they-evil/"/>
    <updated>2013-06-04T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/06/04/singletons-in-cocoa-are-they-evil</id>
    <content type="html"><![CDATA[<h2>故事</h2>

<p>这事是这样的，去年我在上课的时候，和老师讨论了一下关于架构的问题，我是开发Cocoa/iOS的，老师是开发Web的，而老师是一个坚定的singletons are evil的拥护者，我和他说了我的App的架构，直接被他一顿猛劈，强烈的谴责了我使用Singletons，我回应说，这个pattern在Cocoa里是大量使用的，结果被搞了一句“用的多的就是对的么？你回去多学习一下再来讨论吧”。</p>

<p>于是我非常郁闷的回去搜索的一大顿的资料，还在Stackoverflow上发起了一个问题：<a href="http://stackoverflow.com/questions/13306268/singletons-in-cocoa-are-they-evil">singletons in cocoa, are they evil?</a>。甚至在某个社区，假扮singleton are evil的拥护者，把所有singleton的缺点列了一堆，结果又是群起而攻之一场舌战。</p>

<p>关于Singleton的缺点，放出一段引用：</p>

<blockquote><ol>
<li><p>They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a code smell.</p></li>
<li><p>They violate the Single Responsibility Principle: by virtue of the fact that they control their own creation and lifecycle.</p></li>
<li><p>They inherently cause code to be tightly coupled. This makes faking them out under test rather difficult in many cases.</p></li>
<li><p>They carry state around for the lifetime of the app. Another hit to testing since you can end up with a situation where tests need to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.</p></li>
</ol>
</blockquote>

<p>公说公有理，婆说婆有理，一度把我弄得越来越困惑，后来我看到这一段话，我就彻底释然了：</p>

<blockquote><p>As for degrees of evil &ndash; it&rsquo;s like speech or literature. F-words are &ldquo;evil&rdquo;. If you speak constantly using f-words words the quality of your language is lower &ndash; people can&rsquo;t tell if you want to say something or just swearing. But in some situations such words help you to get things done (think of the battlefield orders). It sort of the same thing with features/patterns and people who have to read and maintain their usage.</p>

<p>– hoha</p></blockquote>

<p>BTW，今天我甚至看到了<a href="http://c2.com/cgi/wiki?AccessorsAreEvil">Accessors Are Evil</a>这样的东西，更坚定了我再也不相信xxx are evil这种说法的决心。</p>

<p>我现在认为Design pattern是前人总结的经验，不同的设计模式有不同的优缺点，比如说用工厂代替单例的，虽说解决了单例的一些问题，但你要真去写一个工厂就知道有多蛋疼，多浪费生命了。然而在较为大型的应用，非常多人协作的项目，队友对项目的把握不一致，水平有高低之分，这时工厂又反而是一种安全的，省时省力的做法。</p>

<p>其实在代码的世界里面，你想要更多的安全，就会丧失更多的灵活性和便利性。如何在这中间取舍，就需要我们彻底的了解某种模式（或者说某种编程方法）的优缺点，在保证基本的安全性的情况下，尽可能的减少工作量，提高工作效率。</p>

<h2>Singletons in Cocoa</h2>

<p>回到正题，还是来说说Cocoa上的单例。Cocoa中的普遍的，大部分的单例，并不是严格的单例（strict singleton），而是一种共享单例（shared singleton），例如sharedApplication，sharedURLCache等。即，大多数情况，我们访问同一个类方法，就可以获得一个同样的实例，但若真的需要存在多个实例亦可。通常，共享单例使用一个shared开的类方法识别。只有当真的只有唯一的一个共享资源的时候，或者不可能有多个资源的时候（比如GPS模块），才会使用严格意义的共享单例。</p>

<h2>线程安全的Singleton</h2>

<p>绝大多数情况下，使用一个共享单例比使用共享单例要好，然而这里有一个常见的创建共享单例的错误，即使是Apple自己的开发者文档也没弄清楚的一个错误，他们把Singleton写成了非线程安全的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sharedInstance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正确的写法应该是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sharedInstance</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
更恰当的写法是使用dispatch_once()</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">MYClass</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">pred</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">MYClass</span> <span class="n">_sharedObject</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pred</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">_sharedObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// or some other init method</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_sharedObject</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>dispatch_once()即为执行且仅仅执行某个block一次，他是同步的方法（记住GCD也有很多同步的方法），其速度也比 @synchronized 快许多。</p>

<h2>严格的单例(strict singleton)</h2>

<p>尽管我们很少会使用到严格的单例模式，但当真的需要的时候，还是可以实现的。</p>

<p>苹果官方文档提供了一个严格单例的实现（<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html#//apple_ref/doc/uid/TP40002974-CH4-SW32">传送门</a>）。
其重载了allocWithZone:, copyWithZone, retain, retainCount, release, autorelease。使得这个实现变得无比复杂而难以理解和控制。</p>

<p>而大多数情况下，实现严格的单例模式，只需要和共享单例相同的代码，再使用NSAssert使得一切调用init的代码作为一个错误处理即可，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">MYSingleton</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedSingleton</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">pred</span><span class="p">;</span>
</span><span class='line'>     <span class="k">static</span> <span class="n">MYSingleton</span> <span class="o">*</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>     <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pred</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span><span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initSingleton</span><span class="p">];});</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Forbid calls to –init or +new</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">NO</span><span class="p">,</span> <span class="err">@”</span><span class="n">Cannot</span> <span class="n">create</span> <span class="n">instance</span> <span class="n">of</span> <span class="n">Singleton</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// You can return nil or [self initSingleton] here, </span>
</span><span class='line'>    <span class="c1">// depending on how you prefer to fail.</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Real (private) init method</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initSingleton</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Init code }</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这份代码的优点是很明显的，避免了复杂的内存操作和重载，又静止了调用者创建多个实例。</p>

<h2>小结</h2>

<p>小结一下，单例模式是Cocoa中非常常用的一个模式，对于应用程序中广泛使用的对象，单例模式是非常便利的方法。而我们也应当在使用的时候多注意单例模式的一些缺点，尽可能的在实现的时候避免他们，比如让单例不存在过于复杂的依赖性和继承，保证其松耦合等。</p>

<h2>Edit:</h2>

<p>One more thing:有筒子问到是@synchronized(self)还是@synchronized(sharedInstance)?</p>

<p>答案是：均可。</p>

<p>self，在实例方法中表现是实例，这一点自不用多说。在类方法中则表现为一种多态的类实例（class instance），他总是会返回正确的类型，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">new</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在本文的这个@synchronized(self)里的self，总是会指向同一个对象，即那个特殊的类实例。（class也是一个对象），故而此处可以使用self。</p>

<p>lancy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OBJC中声明字符串常量的一个常见错误（常量指针和指针常量）]]></title>
    <link href="http://gracelancy.com/blog/2013/06/02/constant-pointer-and-pointer-to-constant/"/>
    <updated>2013-06-02T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/06/02/constant-pointer-and-pointer-to-constant</id>
    <content type="html"><![CDATA[<p>我们知道，NSNotification是Cocoa中观察模式最易用的实现方法，比起直接使用KVO（Key-Value Observing）他更加容易实现也更好理解。一个样例：</p>

<h4>Poster.h</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Define a string constant for the notification</span>
</span><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">PosterDidSomethingNotification</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Poster.m</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">PosterDidSomethingNotification</span> <span class="o">=</span> <span class="err">@”</span><span class="n">PosterDidSomethingNotification</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// Include the poster as the object in the notification</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'><span class="nl">postNotificationName:</span><span class="n">PosterDidSomethingNotification</span>
</span><span class='line'>              <span class="nl">object:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Observer.m</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// Import Poster.h to get the string constant</span>
</span><span class='line'><span class="cp">#import “Poster.h”</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// Register to receive a notification</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                         <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">posterDidSomething:</span><span class="p">)</span>
</span><span class='line'>                                             <span class="nl">name:</span><span class="n">PosterDidSomethingNotification</span>
</span><span class='line'>                                           <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">posterDidSomething:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">note</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle the notification here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Always remove your observations</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">removeObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意到，在使用Notifikation的时候，会需要声明字符串常量，作为notification的name。这时，const的位置就比较重要，很容易让不了解的人犯错误：</p>

<p>错误的写法（常量指针）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">extern</span> <span class="k">const</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">RNFooDidCompleteNotification</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>正确的写法（指针常量）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">RNFooDidCompleteNotification</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里涉及到常量指针和指针常量的概念，简单的来说：</p>

<ul>
<li>常量指针：就是指向常量的指针，关键字 const 出现在 * 左边，表示指针所指向的地址的内容是不可修改的，但指针自身可变。</li>
<li>指针常量：指针自身是一个常量，关键字 const 出现在 * 右边，表示指针自身不可变，但其指向的地址的内容是可以被修改的。</li>
</ul>


<p>在此例中：我们知道，NSString永远是immutable的，所以NSString * const 是有效的，而const NSString * 则是无效的。而使用错误的写法，则无法阻止修改该指针指向的地址，使得本应该是常量的值能被修改，造成了隐患。这是需要注意的一个常见错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Associative References(关联引用) 续：相关实践]]></title>
    <link href="http://gracelancy.com/blog/2013/05/22/objective-c-associative-references-part2/"/>
    <updated>2013-05-22T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/05/22/objective-c-associative-references-part2</id>
    <content type="html"><![CDATA[<h2>About</h2>

<p>我之前写了一篇博文<a href="http://gracelancy.com/?p=82">Objective-C Associative References(关联引用)</a>，介绍我在在研究objc runtime的有趣的发现，但当时我并没有意识到这个技术应该使用在何处。在一些实践之后，小结一下有关关联引用的一些相关实践吧。</p>

<h2>Category中使用关联引用来添加property</h2>

<p>我们知道category是不能创建实例变量的，但我们可以通过关联引用来达到这样的目的。特别是当你不持有这个类，比如说系统的类，而你又的确需要添加一个property。</p>

<p>你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> <span class="nl">(EmailAddress)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">emailAddress</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span> <span class="nl">(EmailAddress)</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="n">emailAddressKey</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">emailAddress</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">emailAddressKey</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setEmailAddress:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">emailAddress</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">emailAddressKey</span><span class="p">,</span> <span class="n">emailAddress</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_COPY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>给UI控件关联上相关对象</h2>

<p>比如UIAlert只有一个tag属性用来做标记，我们经常需要根据Tag属性在找出对应需要操作的对象。但使用关联对象，我们可以把UIAlert和某个对象关联，简化这个过程。</p>

<p>比如你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">id</span> <span class="n">interestingObject</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                     <span class="nl">initWithTitle:</span><span class="err">@”</span><span class="n">Alert</span><span class="err">”</span> <span class="nl">message:</span><span class="nb">nil</span>
</span><span class='line'>                     <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                     <span class="nl">cancelButtonTitle:</span><span class="err">@”</span><span class="n">OK</span><span class="err">”</span>
</span><span class='line'>                     <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">alert</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kRepresentedObject</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">interestingObject</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在alertView的delegate方法里面这样操作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span>
</span><span class='line'><span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIButton</span> <span class="o">*</span><span class="n">sender</span> <span class="o">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">alertView</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kRepresentedObject</span><span class="p">);</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">buttonLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">sender</span> <span class="n">titleLabel</span><span class="p">]</span> <span class="n">text</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结合以上两者的最佳实践</h2>

<p>在Cocoa里面，我们经常会见到user info这样一个属性，（比如NSNotification.userinfo），代表用户自定义的payload数据。</p>

<p>同时一般而言，显式的使用objc的runtime特性并不是一个良好的编程习惯，故而我们可以使用category给UIAlert添加一个user info的property，以将objc的runtime代码进行隐藏。</p>

<p>代码与前面给出的类似，你可以在Github下载到完整Demo。
<a href="https://github.com/lancy/UIAlertViewUserinfo">传送门</a></p>

<p>使用效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Alert One&quot;</span> <span class="nl">message:</span><span class="s">@&quot;I gonna show the userinfo&quot;</span> <span class="nl">delegate:</span><span class="n">self</span> <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;OK&quot;</span> <span class="nl">otherButtonTitles:</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="nl">setUserinfo:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;message&quot;</span><span class="o">:</span> <span class="s">@&quot;I&#39;m userinfo of alert one&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CoreLocation来跟踪用户距离]]></title>
    <link href="http://gracelancy.com/blog/2013/05/16/use-corelocation-to-track-travel-distance/"/>
    <updated>2013-05-16T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/05/16/use-corelocation-to-track-travel-distance</id>
    <content type="html"><![CDATA[<h1>使用CoreLocation来跟踪用户距离</h1>

<h2>背景</h2>

<p>CoreLocation是一个强大的Framework，他能帮助开发使其免于复杂的位置处理而专注于应用逻辑的开发。然而CoreLocation并没有提供的对用户移动距离的检测，当我们开发跑步类运动类应用时，就不可避免的需要这项功能。凑巧有一个朋友让我帮忙做一个GPS模块，故而就有了CYLocationManager。</p>

<p>代码在Github开源托管，<a href="https://github.com/lancy/LocationManager">传送门</a></p>

<h2>实现说明</h2>

<p>Readme有详细的使用说明，我在这里主要描述一下实现的一些要点。</p>

<p>基本的思路既是不断的采样用户数据，过滤掉误差较大的数据，取相对误差较小的数据进行记录，然后计算相邻记录点之间的距离。</p>

<p>简单描述一下几个要点：</p>

<ol>
<li>当用户开始运动，程序开始追踪，设置一个强制标记，（needForceCalculation），表示程序应该忽略其他因素，立刻获取一个点坐标。用做起始值。</li>
<li>设置了CLLocationManager.headingFilter，使得程序能在用户转向的时候收到通知，此时设置一个强制标记（needForceCalculation），使得程序在用户转向的时候，记录下转向时所在的位置，以减少误差。</li>
<li>设置CLLocationManager.distanceFilter，使得程序在变化的位置大于一定数值时该更新位置才算为有效，可以避免用户在一个地方停留，由于误差记录距离依然增长。</li>
<li>当程序获得位置更新时，若精度合格，切时间戳合理，则加入一个数组，用于之后的计算。若精度大于某个阀值，则认为该位置对跟踪距离无帮助，此时将该位置舍去。</li>
<li>数组currentKeepLocations来记录最近更新的k个位置，并每隔t秒，从该数组中，取出精度最高的位置记录。（精度见CLLocation.horizontalAccuracy）</li>
<li>注意，当用户停止运动时，位置将无法得到更新，此时需要设置一个timer，令其在一定时间内强制获得一个位置。</li>
<li>该程序还可以通过每次更新位置时获得的位置的精确度来判断GPS信号的强弱。</li>
</ol>


<h2>联系我</h2>

<p>如果你对这个程序有疑问，请联系我</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X/iOS 多线程编程小结]]></title>
    <link href="http://gracelancy.com/blog/2013/05/02/OSX-iOS-Threading-Programming/"/>
    <updated>2013-05-02T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/05/02/OSX-iOS-Threading-Programming</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>我来填坑了。欠下的多线程，趁着假期无聊，赶紧码了。</p>

<p>好吧，如我的这篇博文《<a href="http://gracelancy.com/?p=116">OS X/iOS 并发编程小结</a>》最后一段所说，虽然queue那样的并发编程非常方便，但在音频、视频这些需求最小延时的情况下，queue并发编程即使有优先级也并不能保证任务在特定的时间得到执行。故而，这种情况下还是需要我们直接操作线程。</p>

<p>注：除开这种情况外，我建议（苹果也建议），各位还是乖乖用queue并发编程就好了。</p>

<h2>什么是多线程</h2>

<p>简而言之，主要有三个术语：线程、进程、任务。
这里不想给大家上操作系统课啦，大家不明白的google一下或者回去翻翻书就好。</p>

<h2>APPLE的多线程技术</h2>

<h3>APPLE关于多线程的整个架构</h3>

<p><img src="http://lianxu.me/images/post/threadlayout.jpg" alt="image" />
（注：NSOperationQueue是在GCD上面的）</p>

<p>ok，我一个一个介绍：</p>

<ol>
<li>多线程底层实现的机制是Mach的线程。坦白的说，mach我压根不懂。苹果也说了，你几乎不会用到。不过如果你真的有兴趣研究，可以看这里：<a href="https://developer.apple.com/library/mac/#documentation/Darwin/Conceptual/KernelProgramming/Mach/Mach.html">Kernel Programming Guide</a> 里面的关于Mach的那部分。</li>
<li>pthread(POSIX threads)。这是传统的多线程，C-based interface，非常灵活。如果你写的不是Cocoa应用，这是实现多线程的最好选择。</li>
<li>NSThread，Cocoa的线程实现。当你在写Cocoa应用而又需要进行直接的线程操作的时候，我认为NSThread是比pthread更好的选择。虽然你依然可以使用pthread在Cocoa程序上，但是会有一些在Cocoa程序需要遵循的规则。我会在后面说明。</li>
<li>GCD和NSOperationQueue略</li>
</ol>


<h3>同步工具</h3>

<p>锁(locks)，条件(condition)，原子操作(atomic)</p>

<h3>线程间通信</h3>

<ol>
<li>Direct messaging: Cocoa应用可以直接perform某个selector在指定线程</li>
<li>全局变量，共享内存和对象。</li>
<li>Conditions：一种特殊类型的锁</li>
<li>Run loop sources：简单的来说，run loop是用来在线程上管理时间异步到达的工具。run loop能为线程监听一个或多个事件源(event sources)。run loop能把线程置于休眠状态，而当事件到达时，系统能唤醒线程并把事件分发给run loop，而后run loop能将事件分发给特定的handler。</li>
<li>Ports and sockets：也使用run loop，不同之处在于可以进行多进程通信</li>
<li>Message queues：历史遗物，一种多进程通信的玩意，才用FIFO的信息队列，但是有效率问题，</li>
<li>Cocoa distributed objects：好高级的技术，可以在call不同cocoa应用的object，甚至跨越网络的不同计算机上的cocoa应用。</li>
</ol>


<p>（老实说，后面几种我原先压根就没见过，为了弄懂他们是啥，看了好几篇文档。总结到这里，我的压力也感觉越来越大。觉得自己图样图拿衣服。。写了点多线程代码，就想总结OSX\iOS多线程编程。这才发现里面内容之多，细节之细令人发指。远不是整理一个并发编程能比的。我水平恐怕也就能堪堪掌握个大概框架，就操作系统课上的那点东西，跟生产环节下的多线程相比真是弱爆了。。）</p>

<p>所以从这里开始，后面我打算走实用主义，直接小结一下如何写多线程程序好了。</p>

<h2>线程管理</h2>

<h3>使用NSThread创建线程</h3>

<ul>
<li>类方法detachNewThreadSelector:toTarget:withObject:</li>
<li>创建一个NSThread对象initWithTarget:selector:object:，并调用start方法</li>
</ul>


<p>需要注意的是，这两种方法创建的线程，是分离（detach）的线程。detached的意思即，当线程退出的时候，系统会自动回收线程资源。当线程运行的时候，可以使用performSelector:onThread:withObject:waitUntilDone:modes来进行线程通信。其中modes用来指定run loop</p>

<p>注意：在大部分情况下，脱离线程更适用，因为它允许系统在线程完成的时候自动回收。如果你想创建可连接的线程（Joinable thread），唯一的办法是使用pthread。</p>

<h3>使用pthread创建线程</h3>

<p><a href="http://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread.3.html#//apple_ref/doc/man/3/pthread">参看pthread手册</a></p>

<p>需要注意的几点：</p>

<ol>
<li>在cocoa程序上仅使用pthread，你需要先使用NSThread生成一个线程之后立即退出。就能保证Cocoa框架切换到多线程模式，来启用一些锁或者其他的同步技术来保证Cocoa框架代码的正确执行。如果你不这么做，当涉及到Cocoa框架的操作时有可能会照成不可预料的后果。</li>
<li>pthread和Cocoa的锁是完全可以混用的，（我就这么做过，因为pthread的锁更灵活），但是对于指定的一个锁，必须使用同类型的接口来操作，即你不能同时用pthread和NSLock同时操作一个锁。</li>
</ol>


<h3>使用NSObject创建线程</h3>

<p>performSelectorInBackground:withObject:也会生成一个脱离线程。你还可以在该线程里面使用performSelectorOnMainThread:withObject:waitUntilDone:modes:</p>

<h3>线程的优先级</h3>

<p>创建的线程的优先级和所处在的线程是相同的，优先级高的线程比优先级低的线程能获得更多运行机会，但并不能保证线程的具体执行时间和顺序。内核的调度算法会决定该运行哪个线程。</p>

<p>NSThread 的 setThreadPriority:以及pthread_setschedparam 可以改变线程的优先级。</p>

<p>注意：一般来说，保持默认优先级是一个不错的选择。更改某些线程的优先级，会增加某些较低优先级的线程的饥饿。若高优先级和低优先级的线程又有交互的需求，那么低优先级就有可能因为得到运行机会的难度而阻塞其他线程，造成线程瓶颈。</p>

<h3>关于自动释放池 （autorelease pool）</h3>

<p>autorelease pool用于自动释放pool里面捕获的autorelease对象。</p>

<p>理论上来说，每一个线程都应该有一个autorelease pool，主
线程在main.m里面XCode会为你创建一个。但当你创建一个线程的时候，你第一件应该做的事，就是创建一个autorelease pool。</p>

<p>非ARC之前，你使用NSAutoreleasePool，之后你可以使用@autoreleasepool。</p>

<p>注意：在ARC环境下你仍然不能忽略autorelease pool，因为ARC仍然使用autorelease来进行release操作，且他并不会为你自动的创建autorelease pool。BTW，除了在线程里面你会需要autorelease pool之外，在次数巨大或者多重的for-loop里面你也会使用autorelease pool，来避免一次alloc和release数量巨大的对象。</p>

<h3>中断线程</h3>

<p>（未完待续。。。写不动了。。）</p>

<h2>Run Loop 详解</h2>

<h2>线程同步 详解</h2>

<h2>Cocoa的线程安全</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Objective-C]]></title>
    <link href="http://gracelancy.com/blog/2013/03/05/modern-objective-c/"/>
    <updated>2013-03-05T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/03/05/modern-objective-c</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Objective-C已经出道了30多年，即使是iOS，也已经面世了5年之久，期间Objective-C和LLVM Clang都已经有了巨大的变化，这篇文章主要是描述一下Modern Objective-C Style。</p>

<p>在写这篇文章的时候，我本打算完整的描述一下我理解的现代Objective-C是如何，然后发现唐巧的blog上已经有一了一篇很好的博文：<a href="http://blog.devtang.com/blog/2012/08/05/use-modern-objective-c/">Objective-C新特性</a>，大家可以先行阅读，我主要对他的博文进行补充。</p>

<h2>使用ARC</h2>

<p>我不想解释更多了，ARC虽说不是万能的，但在工程效率高于一切，速度就是王道的今天，ARC可以省下大量的时间。更何况，为什么总有人认为这些机械的内存管理，自己要做的比机器好呢？</p>

<p>想了解更多的ARC的信息，推荐Ray的arc教程</p>

<ul>
<li><a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1</a></li>
<li><p><a href="http://www.raywenderlich.com/5773/beginning-arc-in-ios-5-tutorial-part-2">http://www.raywenderlich.com/5773/beginning-arc-in-ios-5-tutorial-part-2</a></p>

<h2>New Object Literals 和 Subscripting</h2>

参见唐巧的博文

<h2>关于instance variables和property和methods</h2>

<p>我之前写了一篇<a href="http://gracelancy.com/?p=88">博文</a>，引起了一些朋友的讨论。这里主要描述，在modern objective-c下，我们怎么写类里面的各种成员。</p></li>
<li><p>你不再需要声明声明property的时候又声明instance variables，当你声明一个property的时候，编译器就会自动的帮你声明一个instance variable。</p></li>
<li>你不再需要@synthesize，当你声明了@property的时候，编译器会自动帮你@synthesize，同时帮你指定好你的instance variable的名称为_var。</li>
<li>即使你确实喜欢自己声明instance variables和自己@synthesize，那么你也不应该违反_var的命名形式。</li>
<li>你不再需要Forward declaration，（只适用OBJC）</li>
<li><strong>把所有私有的东西从.h文件移动到.m文件</strong></li>
</ul>


<p>强调一下，上面说的第五条，把所有私有的东西从.h文件移动到.m文件，可以说就是“old-fashioned” 和 modern OBJC的最大区别。具体有如下几点：</p>

<ol>
<li>你可以把需要私有的property从h文件移到m文件，这样外界将无法直接访问。

<ul>
<li>记住IBOutlet也是可以移到m文件的。</li>
</ul>
</li>
<li>你可以把私有的instance variables从h文件移到m文件。这里可以移到两个地方：

<ul>
<li>.m文件的@interace</li>
<li>.m文件的@implementation</li>
</ul>
</li>
<li>你可以把类需要实现的protocol从h文件移到m文件，当你认为其不需要暴露给外部知道时。</li>
<li>如之前所说，你不再需要前置声明，所以私有方法，可以直接从.h文件中删除。当然你也可以放在.m文件的@interface里。

<ul>
<li>记住IBOutlet也可以直接连到.m文件中，不需要连到@interface里面做前置声明。</li>
</ul>
</li>
</ol>


<p>注意：有时候你会奇怪，为什么有的程序有instance variables，有些却没有。这里暂时还没有一个明确的定论，只是不同风格有不同的写法。有些人喜欢为所有的东西创建property，而有些人却不愿意为私有成员创建property。</p>

<p>就我个人而言，是习惯于为所有的东西创建property的，然后将私有的proerty移到m文件中。为什么使用property呢？这里有一个来自苹果工程师Paul（在stanford上课的那位）在课上的解释：</p>

<p>Why property？</p>

<p>Most importantly, it provides safety and subclassablility for instance variables. Also provides “value” for lazy instantiation, UI updating, consistency checking, etc.</p>

<h2>使用Block</h2>

<ul>
<li>可以使用block来代替delegate</li>
<li>可以使用block来遍历容器。</li>
</ul>


<p>Block通常意味着Do more with less code</p>

<h2>关于property的权限，对外readonly对内readwrite的property</h2>

<p>你可以在.h文件里设置一个权限readonly的property，并在.m文件设置一个权限为readwrite的同样的property，这时，你的property对外是只读的，对内却是可读写。</p>

<p>EDIT:补充关于最后这个的样例说明
在类的.h文件的interface下声明一个</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">testString</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再在.m文件的interface下声明一个</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">testString</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时在类内部可以对该变量进行修改，但在类外部修改会被编译器报错为readonly。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X/iOS 并发编程小结]]></title>
    <link href="http://gracelancy.com/blog/2013/02/19/OSX-iOS-Concurrency-Programming/"/>
    <updated>2013-02-19T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2013/02/19/OSX-iOS-Concurrency-Programming</id>
    <content type="html"><![CDATA[<h2>简洁</h2>

<p>这里不讨论传统的多线程编程，而讨论OS X/iOS特有的异步技术，GCD和Operation Queue。</p>

<ul>
<li><strong>Grand Central Dispatch (GCD)：</strong> C语言的系统管理线程，不需要编写线程代码，只需要定义需要执行的任务，然后以block的形式添加到适当的dispatch queue中，系统就会负责线程的创建和任务调度。</li>
<li><strong>Operation Queue：</strong> Cocoa的系统管理线程，与GCD类似。</li>
</ul>


<h2>Operation Queues</h2>

<p>基于cocoa的应用通常会使用Operation Queues</p>

<h3>Operation Objects</h3>

<p>NSOperation是抽象基类，需要实现相应子类。不过Cocoa提供了两个具体的子类NSInvocationOperation和NSBlockOperation。其中NSInvocationOperation以@selector来创建operation object；NSBlockOperation以block来创建operation object.(这里暂且不讨论自己实现NSOperation).</p>

<p>所有的operation objects都支持这些特性：</p>

<ul>
<li>依赖关系，可以阻塞某个operation，直到他所依赖的所有operation都已经完成</li>
<li>可以设置completion block</li>
<li>可以通过KVO来监控operation的状态</li>
<li>可以设置operation的优先级</li>
<li>可以取消</li>
</ul>


<p>创建operation object之后，加入到适当的operation queue即会立刻开始执行。</p>

<h3>Operaton queue</h3>

<ul>
<li>可以设置并发执行的operation 数量，设为1，即为串行队列</li>
<li>可以暂时挂起，继续，等待直到完成</li>
</ul>


<h2>Dispatch Queues</h2>

<p>GCD使用block来创建任务，切任务总是以添加的顺序开始顺序执行。有串行队列，也有并发队列，还有主线程队列。</p>

<p>注：GCD相关技术还有，Dispatch group：监控一组block对象完成；Dispatch semaphore：类似于传统的信号量；Dispatch source：在特定类型的系统事件发生时产生通知。</p>

<h3>管理和创建Dispatch Queue</h3>

<ul>
<li>dispatch_get_global_queue 获得全局共享并发队列</li>
<li>dispatch_queue_create 创建串行队列</li>
<li>可以通过dispatch_set_context和dispatch_get_context来管理自定义的上下文信息，finalizer可以销毁上下文。</li>
<li>dispatch_async 异步添加任务到queue，dispatch_sync同步添加（尽量少用）</li>
<li>据说可以添加completed block，但是实际上就是再添加一个block，（感觉略无力，不敢用）</li>
<li>dispatch_apply可以执行循环迭代</li>
</ul>


<h3>Dispatch Semaphore</h3>

<ol>
<li>dispatch_semaphore_create创建信号量，指定可用资源数</li>
<li>dispatch_semaphore_wait等待可用资源数</li>
<li>dispatch_semaphore_signal释放信号量</li>
</ol>


<h3>Dispatch group</h3>

<ol>
<li>dispatch_group_create 创建group</li>
<li>dispatch_group_async 添加到group</li>
<li>dispatch_group_wait 阻塞线程直到group完成</li>
</ol>


<h3>Dispatch source</h3>

<p>略</p>

<hr />

<p>备注：queue 不是替代线程的万能药!queue 提供的异步编程模型适合 于延迟无关紧要的场合。虽然 queue 提供配置任务执行优先级的方法, 但更高的优先级也不能确保任务一定能在特定时间得到执行。因此线程 仍然是实现最小延迟的适当选择,例如音频和视频 playback 等场合。</p>

<p>（上面这一条让我吐死。。看了几十页的文档，写了n多代码。。发现real time是不适用的。。然后开始用多线程。。过两天在补一个多线程编程小结。。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa代码规范官方指南（要点与简译）]]></title>
    <link href="http://gracelancy.com/blog/2012/12/15/cocoa-coding-guideline/"/>
    <updated>2012-12-15T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/12/15/cocoa-coding-guideline</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p>我一年前的时候看这篇的时候，对cocoa还处在刚入门阶段，很多细节并没有留下太深刻的影响。如今经常阅读别人的代码了之后，越来越体会到代码规范的重要性，故而重新找回这一篇，又仔细读了一遍，收获颇丰。本着善待别人就是善待自己的原则，就顺手翻译了一遍，希望每个人都有收获，能写规范的代码，让别人看得舒服。</p>

<p>英文好的同学，建议直接看英文，因为很多东西我都不知道怎么翻译，这一篇原名叫 Coding Guidelines for Cocoa</p>

<h1>命名基础</h1>

<h2>一般原则</h2>

<h3>清楚</h3>

<ul>
<li>在保证清楚的前提下才能简化</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Code </th>
<th> Commentary</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>insertObject: atIndex:</td>
<td>Good.|</td>
</tr>
<tr>
<td></td>
<td>insert:at: </td>
<td> Not clear; what is being inserted? what does “at” signify?|</td>
</tr>
<tr>
<td></td>
<td>removeObjectAtIndex: </td>
<td> Good.|</td>
</tr>
<tr>
<td></td>
<td>removeObject: </td>
<td> Good, because it removes object referred to in argument.|</td>
</tr>
<tr>
<td></td>
<td>remove: </td>
<td> Not clear; what is being removed?|</td>
</tr>
</tbody>
</table>


<ul>
<li>一般来说，不要使用缩写，即使他的全称很长</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th>Code </th>
<th> Commentary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>destinationSelection</td>
<td>Good.|</td>
</tr>
<tr>
<td></td>
<td>destSel</td>
<td>Not clear.|</td>
</tr>
<tr>
<td></td>
<td>setBackgroundColor:</td>
<td>Good.|</td>
</tr>
<tr>
<td></td>
<td>setBkgdColor:</td>
<td>Not clear.|</td>
</tr>
</tbody>
</table>


<ul>
<li>只有一些少数的缩写的确是为绝大多数人所知的，可以继续使用（见附录）</li>
<li>避免含糊不清API命名，比如能够以一种以上的方式进行解释的名称</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th>Code</th>
<th>Commentary</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>sendPort</td>
<td>Does it send the port or return it?|</td>
</tr>
<tr>
<td></td>
<td>displayName</td>
<td>Does it display a name or return the receiver’s title in the user interface?|</td>
</tr>
</tbody>
</table>


<h3>一致性</h3>

<ul>
<li>使用和cocoa一致的命名风格，如果你不确定，可以参看头文件和文档</li>
<li>一致性在你的类方法使用了多态性的情况下尤为重要，不同类却做相同事的方法应该有相同的名字</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Code </th>
<th> Commentary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> &ndash; (NSInteger)tag </td>
<td> Defined in NSView, NSCell, NSControl. |</td>
</tr>
<tr>
<td></td>
<td> <code>- (void)setStringValue:(NSString *)</code> </td>
<td> Defined in a number of Cocoa classes. |</td>
</tr>
</tbody>
</table>


<h3>不要自参考（No self-reference）</h3>

<ul>
<li>命名不要自参考</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Code </th>
<th> Commentary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>NSString </td>
<td> Okay. |</td>
</tr>
<tr>
<td></td>
<td>NSStringObject </td>
<td> Self-referential.|</td>
</tr>
</tbody>
</table>


<ul>
<li>常量是这个原则的例外，比如mask，比如notification，（译者注：比如encoding）</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Code </th>
<th> Commentary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> NSUnderlineByWordMask </td>
<td> Okay. |</td>
</tr>
<tr>
<td></td>
<td> NSTableViewColumnDidMoveNotification </td>
<td> Okay. |</td>
</tr>
</tbody>
</table>


<h2>前缀</h2>

<p>因为没有命名空间，所以前缀是很必要的</p>

<ul>
<li>前缀也有指定的格式，两到三个字母的大写缩写，不要使用下划线</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Prefix </th>
<th> Cocoa Framework </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> NS </td>
<td> Foundation |</td>
</tr>
<tr>
<td></td>
<td> NS </td>
<td> Application Kit |</td>
</tr>
<tr>
<td></td>
<td> AB </td>
<td> Address Book |</td>
</tr>
<tr>
<td></td>
<td> IB </td>
<td> Interface Builder |</td>
</tr>
</tbody>
</table>


<ul>
<li>命名类，协议，函数（译者注：这里是指c-style函数），常量，typedef结构使用前缀。命名类方法时不要使用前缀，因为class已经定义了他们。也不要在命名the fields of structure使用前缀。（译者注：不知道如何翻译，求各路大神指点）</li>
</ul>


<h2>命名约定</h2>

<ul>
<li><p>使用驼峰法命名，即不要使用任何分隔符，而使用单词首字符大写的方式来分割。要额外注意下面两点：</p>

<ul>
<li><p>方法首字母小写，不要使用前缀</p>

<p>  <code>objective-c
￼￼fileExistsAtPath:isDirectory:    
 </code>
一个例外，当使用广为人之的缩写的作为方法开头时，比如TIFFRepresentation (NSImage).</p></li>
<li><p>定义方法和常量的时候，使用相关前缀并第一个单词首字母大写</p>

<p>  <code>objective-c
  NSRunAlertPanel
  NSCellDisabled
 </code></p></li>
</ul>
</li>
<li><p>不要使用下划线来标记私有方法，这是苹果的保留字段。冒然使用会导致不可知的冲突。（译者注：或者上不了架）</p></li>
</ul>


<h2>类和协议的命名</h2>

<p>类的名字应该包含一个名词，用来指明这个类（或者这个类的对象）表示什么，或者做了什么。类名需包含一个适当的前缀</p>

<p>协议的命名取决于协议如何组织行为</p>

<ul>
<li>大多数协议将一些相关的方法组合在一起，但是又不关联特定的类，这样的协议命名需要注意不被误认为一个类，通常的做法，是使用动名词形式（-ing）</li>
</ul>


<table>
<thead>
<tr>
<th></th>
<th> Code </th>
<th> Commentary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> NSLocking </td>
<td>  Good. |</td>
</tr>
<tr>
<td></td>
<td> NSLock </td>
<td> Poor (seems like a name for a class). |</td>
</tr>
</tbody>
</table>


<ul>
<li>有一些协议将一些不相关的方法组合在一起，却是为了指向特定的类，这时可以将协议命名为于类名相同。一个例子就是NSObject protocol。（译者注：这个情况有点像java里的interface，应用这种协议的方式就能达到相同接口不同实现的效果。虽然我从没见过有人这么做。如果这里我有理解错的地方，各路大神请斧正）</li>
</ul>


<h2>头文件</h2>

<ul>
<li>声明一个单独的类或协议，比如NSLocale.h 声明 The NSLocale class.</li>
<li>声明关联的类和协议，比如NSString.h 声明 NSString and NSMutableString classes；再比如NSLock.h 生命了NSLocking protocol and NSLock, NSConditionLock, and NSRecursiveLock classes.</li>
<li>包含框架头文件，比如Foundation.h包含Foundation.framework.</li>
<li>添加API到另一个框架的类，If you declare methods in one framework that are in a category on a class in another framework, append “Additions” to the name of the original class; an example is the NSBundleAdditions.h header file of the Application Kit.</li>
<li>相关的函数或者类型，If you have a group of related functions, constants, structures, and other data types, put them in an appropriately named header file such as NSGraphics.h (Application Kit).</li>
</ul>


<h1>方法命名</h1>

<h2>一般原则</h2>

<ul>
<li>首字母小写，驼峰命名法，不要使用前缀</li>
<li>对于对某个对象进行操作的方法，以一个动词开头，比如</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">invokeWithTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">selectTabViewItem:</span><span class="p">(</span><span class="n">NSTabViewItem</span> <span class="o">*</span><span class="p">)</span><span class="nv">tabViewItem</span>
</span></code></pre></td></tr></table></div></figure>


<p>  不要使用do和does，因为他们没有添加任何说明意义，也不要在动词前加副词和形容词</p>

<ul>
<li>如果方法返回一个属性，则可以以属性为开头命名方法名，“get”是不必要的，除非是间接的返回。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSSize</span><span class="p">)</span><span class="nf">cellSize</span><span class="p">;</span>  <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSSize</span><span class="p">)</span><span class="nf">calcCellSize</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSSize</span><span class="p">)</span><span class="nf">getCellSize</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在所有参数前使用关键词</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendAction:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="nf">to:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">anObject</span> <span class="nf">forAllCells:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">// Right</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendAction:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span> <span class="o">:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">anObject</span> <span class="o">:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">flag</span><span class="p">;</span> <span class="c1">// Wrong</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用描述性的关键字描述参数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">viewWithTag:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">aTag</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">taggedView:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">aTag</span><span class="p">;</span> <span class="c1">// Wrong.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在子类里面扩展父类已有的方法时，再原来的方法后面添加关键字，比如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frameRect</span><span class="p">;</span> <span class="c1">//NSView, UIView.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frameRect</span>
</span><span class='line'><span class="nf">mode:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">aMode</span> <span class="nf">cellClass:</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="nv">factoryId</span>
</span><span class='line'><span class="nf">numberOfRows:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">rowsHigh</span>
</span><span class='line'><span class="nf">numberOfColumns:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">colsWide</span><span class="p">;</span>
</span><span class='line'><span class="c1">// NSMatrix, a subclass of NSView </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>参数之间不要使用“and”连接</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">runModalForDirectory:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span> <span class="nf">file:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="n">name</span> <span class="nl">types:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">fileTypes</span><span class="p">;</span>        <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">runModalForDirectory:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">path</span> <span class="nf">andFile:</span><span class="p">(</span><span class="n">NSString</span>
</span><span class='line'><span class="o">*</span><span class="p">)</span><span class="n">name</span> <span class="nl">andTypes:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">fileTypes</span><span class="p">;</span>   <span class="c1">//Wrong.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当一个方法执行两个不同操作时，使用“and”</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">openFile:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">fullPath</span> <span class="nf">withApplication:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">appName</span> <span class="nf">andDeactivate:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>属性访问方法</h2>

<ul>
<li>如果property表现为一个名词，则</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span><span class="nf">noun</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setNoun:</span><span class="p">(</span><span class="n">type</span><span class="p">)</span><span class="nv">aNoun</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果property是形容词，则</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEditable</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setEditable:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果property是动词，则</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">verbObject</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setVerbObject:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要把动词分词形式当初形容词用，例如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAcceptsGlyphInfo:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">acceptsGlyphInfo</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setGlyphInfoAccepted:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">glyphInfoAccepted</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以使用情态动词（can，show，will等），但是不要使用do，does</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setCanHide:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canHide</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setShouldCloseDocument:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldCloseDocument</span><span class="p">;</span> <span class="c1">//Right.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setDoesAcceptGlyphInfo:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">doesAcceptGlyphInfo</span><span class="p">;</span> <span class="c1">//Wrong.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>&ldquo;get&#8221;只用于间接返回对象或数值，你应该只在需要返回多个值的适合使用这样的形式：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getLineDash:</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span><span class="nv">pattern</span> <span class="nf">count:</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="nv">count</span> <span class="nf">phase:</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="p">)</span><span class="nv">phase</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这样的方法里，你应该允许接受NULL作为参数，当呼叫者不关心多个返回值时。</p>

<h2>代理方法</h2>

<ul>
<li>用能指明发送信息的类的名字作为delegate方法名的开头</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">NSTableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">shouldSelectRow:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">row</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">NSApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="nf">openFile:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">filename</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>其他的参数在附在前一条的后面，除非只有一个参数the sender</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">applicationOpenUntitledFile:</span><span class="p">(</span><span class="n">NSApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>post notification的方法为例外，这时，单个参数为notification对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">windowDidChangeScreen:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>用“did”和“will”来表示某些事已经发生或即将发生</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">browserDidScroll:</span><span class="p">(</span><span class="n">NSBrowser</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSUndoManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">windowWillReturnUndoManager:</span><span class="p">(</span><span class="n">NSWindow</span> <span class="o">*</span><span class="p">)</span><span class="nv">window</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>询问delegate，某事要发生时是否允许，使用should</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">￼</span><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">windowShouldClose:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>容器方法（collection methods）</h2>

<ul>
<li>一般形式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addElement:</span><span class="p">(</span><span class="n">elementType</span><span class="p">)</span><span class="nv">anObj</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeElement:</span><span class="p">(</span><span class="n">elementType</span><span class="p">)</span><span class="nv">anObj</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">elements</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果容器是明显无序的，返回NSSet来替代NSArray。</li>
<li>插入和删除</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertLayoutManager:</span><span class="p">(</span><span class="n">NSLayoutManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">atIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeLayoutManagerAtIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现细节上的注意事项：

<ul>
<li>一般来说，插入的对象包涵所有关系，所以在你插入对象的时候，应该retain他们，删掉他们的时候，应该release。</li>
<li>If the inserted objects need to have a pointer back to the main object, you do this (typically) with a set&hellip; method that sets the back pointer but does not retain. In the case of the insertLayoutManager:atIndex: method, the NSLayoutManager class does this in these methods:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTextStorage:</span><span class="p">(</span><span class="n">NSTextStorage</span> <span class="o">*</span><span class="p">)</span><span class="nv">textStorage</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSTextStorage</span> <span class="o">*</span><span class="p">)</span><span class="nf">textStorage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would normally not call setTextStorage: directly, but might want to override it. (译者注：这个情况我也不是很熟悉，为避免让人误解，故保留原文，有大神准确的明白这里指什么的，请指教)</p>

<h2>方法参数</h2>

<p>对于方法的参数的命名，有一般原则：</p>

<ul>
<li>小写开头的驼峰命名(for example, removeObject:(id)anObject).</li>
<li>不要使用“pointer”或“ptr”，让参数的类型来说明这些</li>
<li>避免一个火两个字母的参数</li>
<li>避免使用不必要的缩写</li>
</ul>


<p>cocoa的惯例命名如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">￼</span><span class="p">...</span><span class="nl">action:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="n">aSelector</span>
</span><span class='line'><span class="p">...</span><span class="nl">alignment:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">mode</span>
</span><span class='line'><span class="p">...</span><span class="nl">atIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">index</span>
</span><span class='line'><span class="p">...</span><span class="nl">content:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="n">aRect</span>
</span><span class='line'><span class="p">...</span><span class="nl">doubleValue:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">aDouble</span>
</span><span class='line'><span class="p">...</span><span class="nl">floatValue:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">aFloat</span>
</span><span class='line'><span class="p">...</span><span class="nl">font:</span><span class="p">(</span><span class="n">NSFont</span> <span class="o">*</span><span class="p">)</span><span class="n">fontObj</span>
</span><span class='line'><span class="p">...</span><span class="nl">frame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="n">frameRect</span>
</span><span class='line'><span class="p">...</span><span class="nl">intValue:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">anInt</span>
</span><span class='line'><span class="p">...</span><span class="nl">keyEquivalent:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">charCode</span>
</span><span class='line'><span class="p">...</span><span class="nl">length:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">numBytes</span>
</span><span class='line'><span class="p">...</span><span class="nl">point:</span><span class="p">(</span><span class="n">NSPoint</span><span class="p">)</span><span class="n">aPoint</span>
</span><span class='line'><span class="p">...</span><span class="nl">stringValue:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">aString</span>
</span><span class='line'><span class="p">...</span><span class="nl">tag:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">anInt</span>
</span><span class='line'><span class="p">...</span><span class="nl">target:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">anObject</span>
</span><span class='line'><span class="p">...</span><span class="nl">title:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">aString</span>
</span></code></pre></td></tr></table></div></figure>


<h2>私有方法</h2>

<p>大部分情况下，私有方法的命名和共有方法一样，然而，一个常见的惯例是给私有方法前加一个前缀来标示这是一个私有方法。Coca frameworks里使用下划线前缀来标示私有。因此，</p>

<ul>
<li>不要使用下划线作为前缀来标示你自己实现的私有方法，苹果已经保留了这种形式</li>
<li>如果你继承了一个Cocoa framework class，为了确保你的私有方法与其不一样，你应该加上你自己的前缀。前缀应该尽量唯一化，一般来说为“XX_”，XX可以是你的公司或项目缩写。</li>
</ul>


<p>虽说这里使用前缀违反了前面说的，类方法不要使用前缀，而是由类本身作为命名空间的原则，但，在这里的意图不一样，这里的意图是为了避免非故意的重写父类的私有方法。
（译者注：OBJC没有真正意义上的私有，即使是使用了如上这样的标示方法，也只是提醒他人这个函数是私有函数，并没有强制的保证别人无法访问。另一种常用的标示私有的做法，是把私有方法的声明放在m文件，而不是h文件）</p>

<h1>函数命名</h1>

<p>一般原则</p>

<ul>
<li>函数的命名和方法相似，不过又一些例外

<ul>
<li>使用和类名或常量相同的前缀</li>
<li>前缀后第一个字母大写</li>
</ul>
</li>
<li>大多数函数以动词开头来描述函数的功能：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSHighlightRect</span>
</span><span class='line'><span class="n">NSDeallocateObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>请求属性的函数，有另一些规则
* 如果函数返回一个来自其第一个参数的属性，则省略动词</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">NSEventMaskFromType</span><span class="p">(</span><span class="n">NSEventType</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="kt">float</span> <span class="n">NSHeight</span><span class="p">(</span><span class="n">NSRect</span> <span class="n">aRect</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回的值是引用，则使用“get”</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">NSGetSizeAndAlignment</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typePtr</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">sizep</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">alignp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回的值是bool，</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">￼￼</span><span class="kt">BOOL</span> <span class="n">NSDecimalIsNotANumber</span><span class="p">(</span><span class="k">const</span> <span class="n">NSDecimal</span> <span class="o">*</span><span class="n">decimal</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>属性和数据类型命名</h1>

<h2>属性和实例变量</h2>

<p>一般来说和属性访问方法的原则相同，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">showsAlpha</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是形容词，可以这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">getter</span><span class="o">=</span><span class="n">isEditable</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">editable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>变量命名需简明的描述储存的属性。一般来说，你不应该直接访问变量，而是使用访问方法，（你只在init和dealloc里面直接访问变量）。</p>

<p>There are a few considerations to keep in mind when adding instance variables to a class:
* Avoid explicitly declaring public instance variables.
Developers should concern themselves with an object’s interface, not with the details of how it stores its data. You can avoid declaring instance variables explicitly by using declared properties and synthesizing the corresponding instance variable.
* If you need to declare an instance variable, explicitly declare it with either @private or @protected.
If you expect that your class will be subclassed, and that these subclasses will require direct access to the
data, use the @protected directive.
* If an instance variable is to be an accessible attribute of instances of the class, make sure you write accessor
methods for it (when possible, use declared properties).</p>

<p>（译者注：在这部分上我持保留意见，这应该不是现代的做法，事实上，我还没有见过有人使用@private，@protected，我自己尝试在代码里面使用这个关键词却被编译器报错。为避免引起人误解，这里保留原文，欢迎大家讨论）</p>

<h2>常量</h2>

<h3>枚举常量</h3>

<ul>
<li>用枚举来给组合一组相关的常量，其类型通常为int</li>
<li>使用和函数命名相同的规则，如</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">_NSMatrixMode</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSRadioModeMatrix</span> <span class="o">=</span> <span class="mi">0</span><span class="err">，</span>
</span><span class='line'>    <span class="n">NSHighlightModeMatrix</span> <span class="o">=</span> <span class="mi">1</span><span class="err">，</span>
</span><span class='line'>    <span class="n">NSListModeMatrix</span> <span class="o">=</span> <span class="mi">2</span><span class="err">，</span>
</span><span class='line'>    <span class="n">NSTrackModeMatrix</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span> <span class="n">NSMatrixMode</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意这里的 typedef 标签并不是必须的。
* 可以创建没有命名的枚举</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSBorderlessWindowMask</span>      <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">NSTitledWindowMask</span>          <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">NSClosableWindowMask</span>        <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">NSMiniaturizableWindowMask</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">NSResizableWindowMask</span>       <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>const常量</h3>

<ul>
<li>Use const to create constants for floating point values. You can use const to create an integer constant if the constant is unrelated to other constants; otherwise, use enumeration.</li>
<li>使用和函数命名相同的规则

<h3>其他类型的常量</h3></li>
<li>一般来说不要使用 #define 来创建常量</li>
<li>使用大写字母来进行预处理标示，判断一个代码块是否需要处理，比如</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">￼#</span><span class="n">ifdef</span> <span class="n">DEBUG</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>macro使用两个下划线前缀和后缀，比如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">__MACH__</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Define constants for strings used for such purposes as notification names and dictionary keys. By using string constants, you are ensuring that the compiler verifies the proper value is specified (that is, it performs spellchecking).TheCocoa frameworks provide many examples of string constants, such as:
  <code>objective-c
  APPKIT_EXTERN NSString *NSPrintCopies;
 </code>
The actual NSString value is assigned to the constant in an implementation file. (Note that the APPKIT_EXTERN macro evaluates to extern for Objective-C.)
(译者注：我没法使用APPKIT_EXTERN，查看了一下cocoa头文件，发现其使用的是FOUNDATION_EXPORT，为避免引起误解，这里也保留原文)</li>
</ul>


<h2>通知和异常</h2>

<h3>通知</h3>

<p>Global NSString objects</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">Name</span> <span class="n">of</span> <span class="n">associated</span> <span class="n">class</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">Did</span> <span class="o">|</span> <span class="n">Will</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">UniquePartOfName</span><span class="p">]</span> <span class="o">+</span> <span class="n">Notification</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSApplicationDidBecomeActiveNotification</span>
</span><span class='line'><span class="n">NSWindowDidMiniaturizeNotification</span>
</span><span class='line'><span class="n">NSTextViewDidChangeSelectionNotification</span>
</span><span class='line'><span class="n">NSColorPanelColorDidChangeNotification</span>
</span></code></pre></td></tr></table></div></figure>


<h3>异常</h3>

<p>Global NSString objecsts</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">Prefix</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">UniquePartOfName</span><span class="p">]</span> <span class="o">+</span> <span class="n">Exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSColorListIOException</span>
</span><span class='line'><span class="n">NSColorListNotEditableException</span>
</span><span class='line'><span class="n">NSDraggingException</span>
</span><span class='line'><span class="n">NSFontUnavailableException</span>
</span><span class='line'><span class="n">NSIllegalSelectorException</span>
</span></code></pre></td></tr></table></div></figure>


<h1>接受的缩写</h1>

<table>
<thead>
<tr>
<th></th>
<th> Abbreviation </th>
<th> Meaning and comments </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> alloc </td>
<td> Allocate. |</td>
</tr>
<tr>
<td></td>
<td> alt </td>
<td> Alternate. |</td>
</tr>
<tr>
<td></td>
<td> app </td>
<td> Application. For example, NSApp the global application object. However, “application” is spelled out in delegate methods, notifications, and so on. |</td>
</tr>
<tr>
<td></td>
<td> calc </td>
<td> Calculate. |</td>
</tr>
<tr>
<td></td>
<td> dealloc </td>
<td> Deallocate. |</td>
</tr>
<tr>
<td></td>
<td> func </td>
<td> Function. |</td>
</tr>
<tr>
<td></td>
<td> horiz </td>
<td> Horizontal. |</td>
</tr>
<tr>
<td></td>
<td> info </td>
<td> Information. |</td>
</tr>
<tr>
<td></td>
<td> init </td>
<td> Initialize (for methods that initialize new objects). |</td>
</tr>
<tr>
<td></td>
<td> int </td>
<td> Integer (in the context of a C int—for an NSInteger value, use integer). |</td>
</tr>
<tr>
<td></td>
<td> max </td>
<td> Maximum. |</td>
</tr>
<tr>
<td></td>
<td> min </td>
<td> Minimum. |</td>
</tr>
<tr>
<td></td>
<td> msg </td>
<td> Message. |</td>
</tr>
<tr>
<td></td>
<td> nib </td>
<td> Interface Builder archive. </td>
</tr>
<tr>
<td></td>
<td> pboard </td>
<td> Pasteboard (but only in constants). |</td>
</tr>
<tr>
<td></td>
<td> rect </td>
<td> Rectangle. |</td>
</tr>
<tr>
<td></td>
<td> Rep </td>
<td> Representation (used in class name such as NSBitmapImageRep). |</td>
</tr>
<tr>
<td></td>
<td> temp </td>
<td> Temporary. |</td>
</tr>
<tr>
<td></td>
<td> vert </td>
<td> Vertical. |</td>
</tr>
</tbody>
</table>


<p>接受的大写缩写词：
ASCII PDF XML HTML URL RTF HTTP TIFF JPG PNG GIF LZW ROM RGB CMYK MIDI FTP</p>

<h1>Tips and Techniques for Framework Developers</h1>

<p>frameworks的开发者需要比其他的开发者更小心。许多用户应用都可能会连接到这些framework，因正因为如此framework的任何都不足，都将被放大。接下来描述的技术可以用于保证你的框架的效率和可靠性。
注意：其中的一些技术不单单适于用框架，你也可以用于应用开发。
（译者注：这一节比较复杂，因为我没开发过frameworks，所以就不冒然翻译了，待我研究清楚后，另开一篇详说。有兴趣的，也可以自行查看原文）</p>

<h1>Contact Me</h1>

<ul>
<li><a href="https://github.com/lancy">Follow my github</a></li>
<li><a href="http://weibo.com/lancy1014">Follow my weibo</a></li>
<li>Send Email to me: <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x6c;&#97;&#110;&#x63;&#121;&#49;&#x30;&#x31;&#x34;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#108;&#x61;&#110;&#99;&#x79;&#49;&#x30;&#x31;&#52;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bayesian Filtering]]></title>
    <link href="http://gracelancy.com/blog/2012/11/29/bayesian-filtering/"/>
    <updated>2012-11-29T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/11/29/bayesian-filtering</id>
    <content type="html"><![CDATA[<h2>About</h2>

<p>贝叶斯过滤算法是一种基于统计学的过滤算法，它使用贝叶斯分类来进行特定类别文本的判别和过滤。</p>

<h2>Naive Bayes classifier</h2>

<p>朴素贝叶斯分类器是一种应用基于独立假设的贝叶斯定理的简单概率分类器，这种潜在的概率模型称为独立特性原型。
简单的说，朴素贝叶斯分类器假设样本的每个特征都是独立的与其他特征不相关的，尽管这些特征可能存在相互依赖，或者一些特征由其他特征而决定。</p>

<h3>概率模型（源自贝叶斯定理）</h3>

<h4>公式</h4>

<p>公式一
<code>Pr(H | T) = Pr(T | H)·Pr(H) / [Pr(T | H)·Pr(H) + Pr(T | M)·Pr(M)]</code></p>

<p>其中:</p>

<ul>
<li>Pr(H | T)代表当一条文本有token T存在的时候，命中指定类别文本的概率</li>
<li>Pr(H)代表对于任意一条文本，命中指定类别文本的概率</li>
<li>Pr(T | H)代表token T出现在命中指定类别文本中的概率</li>
<li>Pr(M)代表对于任意一条文本，非命中指定类别文本的概率</li>
<li>Pr(W | H)代表token T出现在非命中指定类别文本重的概率</li>
</ul>


<p>通常情况下，我们会假定Pr(H) = Pr(M) = 0.5，即普遍命中概率和普遍非命中概率相等，这种假定是因为我们不想对出现的文本产生偏见关注。在这个假定下，我们可以将公式化简为：</p>

<p>公式一（简）
<code>Pr(H | T) = Pr(T | H) / [Pr(T | H) + Pr( T | M)]</code></p>

<h4>合并独立概率</h4>

<p>朴素贝叶斯分类器假定每个特征（该应用中为token）都是独立的，则我们可以使用合并概率公式：</p>

<p>公示二
<code>P = P2·P2···Pn / [P1·P2···Pn + (1 - P1)(1 - P2)···(1 - Pn)]</code></p>

<p>其中：</p>

<ul>
<li>P 即为该文本命中指定类别文本的概率</li>
<li>Pi (i = 1..n)当文本中出现某一token i，的时候，该文本命中指定类别文本的概率。（上面的Pr(H | T)）</li>
</ul>


<h2>实现案例——贝叶斯过滤算法在抽奖微博识别的应用</h2>

<h3>功能</h3>

<p>鉴别给定的微博，判断其是否为抽奖微博，从而为后续操作，比如过滤或者自动参与抽奖，提供基础。</p>

<h3>程序设计</h3>

<ol>
<li><p>首先收集一定数量的抽奖微博和非抽奖微博，存在不同的两个文件（<code>hitFileName.txt</code>;
<code>misFileName.txt</code>）</p></li>
<li>将两个文件分别读入两个List（<code>hitStringList</code>, <code>misStringList</code>）</li>
<li><p>对List里的每个string，进行tokenization，并加到对应的两个countTable(dict)，（<code>hitCountTable</code>,
<code>misCountTable</code>），countTable用于统计每个token出现的次数。</p>

<ul>
<li>例：<code>hitCountTable[token]</code>表示token在命中文本中出现的次数）</li>
</ul>
</li>
<li>将<code>countTable</code>转换为对应的<code>probabilityTable</code>，（<code>hitProbabilityTable</code>,
<code>misProbabilityTable</code>）:单个token出现的次数 / 整个表所有token出现的次数）

<ul>
<li>例：<code>hitProbabilityTable[token]</code>表示token在命中文本重出现的概率</li>
</ul>
</li>
<li><p>用公式一，由<code>hitProbabilityTable</code>和<code>misProbabilityTable</code>求得<code>tokensProbabilityTable</code></p>

<ul>
<li><code>tokensProbabilityTable[token]</code>表示当一条文本有token存在的时候，命中指定类别文本的概率</li>
</ul>
</li>
<li>由给定string，分词后，找出它们其在<code>tokensProbabilityTable</code>的概率，用公式二，既可以求出该文本命中指定类型文本的概率</li>
</ol>


<h3>代码</h3>

<p>代码在Github开源托管<a href="https://github.com/lancy/Bayesian">传送门</a></p>

<h2>Contact Me</h2>

<ul>
<li><a href="https://github.com/lancy">Follow my github</a></li>
<li><a href="http://weibo.com/lancy1014">Follow my weibo</a></li>
<li><a href="https://github.com/lancy/Bayesian/issues">Write an issue</a></li>
<li>Send Email to me: <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#108;&#x61;&#x6e;&#99;&#121;&#x31;&#x30;&#x31;&#x34;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x6c;&#97;&#x6e;&#x63;&#x79;&#x31;&#48;&#x31;&#52;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从一段奇葩的objc代码看代码规范的重要性]]></title>
    <link href="http://gracelancy.com/blog/2012/11/27/debug-objc-code/"/>
    <updated>2012-11-27T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/11/27/debug-objc-code</id>
    <content type="html"><![CDATA[<h2>背景介绍</h2>

<p>昨天，在和我一个朋友讨论，到底是用<code>self.propertyName</code>还是<code>_propertyName</code>来访问property，我认为应该使用<code>self.propertyName</code>，因为我在听Stanford
Open
Course的时候，苹果的工程师告诫要使用<code>self.propertyName</code>，不要使用<code>_propertyName</code>。而朋友认为应该使用<code>_propertyName</code>，因为google
objc code style认为最好不要用<code>self.propertyName</code>。</p>

<p>我没看过google objc code style，我只看过objective c programming
guide。在我的理解里property的作用在于根据参数生成相应的getter和setter。<code>self.propertyName</code>本质上既是调用getter函数的，而<code>_propertyName</code>直接访问成员函数，因为相应参数生成的getter和setter是不会被调用的。</p>

<p>再说，我还是决定相信apple，而不是google，毕竟Objc还是apple在支持和维护。</p>

<h2>上代码</h2>

<p>重点来了，朋友为了说服我<code>self.property</code>是有问题的，发了一段代码过来，这段代码非常奇葩，可以点<a href="http://lancy.applesysu.com/wp-content/uploads/2012/11/FuckTableView.zip">这里</a>下载，或者直接看代码，代码不算很长，简单的说，是要实现一个功能，一个tableview右上角有一个刷新按钮，每次刷新会改变dataArray（setupData），然后刷新tableview。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">UITableViewDataSource</span><span class="p">,</span> <span class="n">UITableViewDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UITableView</span> <span class="o">*</span><span class="n">tableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">dataArray</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithNibName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibNameOrNil</span> <span class="nf">bundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibBundleOrNil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithNibName:</span><span class="n">nibNameOrNil</span> <span class="nl">bundle:</span><span class="n">nibBundleOrNil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//按这个按钮本来是tableview会变化的，但是现在调用了reloadData之后，不会调用cellForRowAtIndexPath这个方法。</span>
</span><span class='line'>        <span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">rightItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBarButtonSystemItem:</span><span class="n">UIBarButtonSystemItemEdit</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">add:</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="n">rightItem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//设置数据源</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">setupData</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - getter &amp; setter</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_tableView</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_tableView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>                                                  <span class="nl">style:</span><span class="n">UITableViewStyleGrouped</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_tableView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="o">=</span> <span class="n">UIViewAutoresizingFlexibleHeight</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_tableView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UITableView Delegate &amp; Datasource</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">dataArray</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;settingcell&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableViewCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle:</span><span class="n">UITableViewCellStyleDefault</span> <span class="nl">reuseIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataArray</span> <span class="nl">objectAtIndex:</span><span class="p">[</span><span class="n">indexPath</span> <span class="n">row</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">flag</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">dataArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;1&quot;</span><span class="p">,</span> <span class="s">@&quot;2&quot;</span><span class="p">,</span> <span class="s">@&quot;3&quot;</span><span class="p">,</span> <span class="s">@&quot;fuck&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">dataArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;1&quot;</span><span class="p">,</span> <span class="s">@&quot;2&quot;</span><span class="p">,</span> <span class="s">@&quot;3&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">add:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">flag</span> <span class="o">=</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">flag</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setupData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题</h3>

<p>这段代码是无效的，按下按钮之后，<code>setupData</code>被调用了，已经log确定<code>dataArray</code>已经改变，<code>tableview</code>的<code>delegate</code>和<code>datasource</code>都设置正确，确定<code>numberOfRowsInSection</code>被调用，奇葩的是<code>cellForRowAtIndexPath</code>没有调用，故而<code>tableview</code>没有改变。</p>

<h4>奇葩的来了</h4>

<p>朋友跟我说，你只要把<code>[self.tableview reloadData]</code>改成<code>[_tableview
reloadData]</code>，他就生效了。是的，他就生效了。你设一个断点在这个地方，然后把<code>self.tableview</code>和<code>_tableview</code>po出来，发现他们的指针是一样的。朋友说写这个代码的那货折腾了一天，百思不得其解，最后得出结论<code>self.propertyName</code>就是坑爹。</p>

<h2>生效的修改方法</h2>

<p>朋友提供的：</p>

<ol>
<li>前面说的讲把<code>[self.tableview reloadData]</code>改成<code>[_tableview reloadData]</code></li>
<li><p>把<code>tableview</code>的getter函数的<code>init</code>里面的<code>self.view.bounds</code>改成<code>CGReckMake(0,0,
320, 480)</code></p></li>
</ol>


<p>朋友试图用这个两个方法来说明，<code>self.property</code>是坑爹的。</p>

<p>我在初步debug的时候，由于我是property的拥护者，property自动生成setter和getter函数，我是不支持重写getter函数的，所以我将getter函数删掉，把初始化代码移到<code>viewdidload</code>里面。然后代码就生效了。</p>

<p>但是即使代码生效了，还是没有找到问题的关键，仍然没办法解释为什么<code>[self.tableview
reloadData]</code>改成<code>[_tableview reloadData]</code>就能运行了，因为po出来的指针是完全一样的，这不科学。</p>

<h2>真正的问题所在</h2>

<p>在各种Stackoverflow，google无果之后，我还是着手准备深入debug。</p>

<p>通过各种断点和gdb，最后打印函数调用栈才让我发现了真正的问题所在。</p>

<p>整个程序的执行顺序是这样的：</p>

<ol>
<li><code>initWithNibName</code>（执行到<code>[self setupData]</code>，没执行完） &ndash;></li>
<li>第一次setupData(执行到<code>[self.tableView reloadData]</code>，没执行完) &ndash;></li>
<li>第一次执行tableview getter（到init，调用<code>self.view</code>，没执行完）-></li>
<li><code>viewDidLoad</code>(到<code>addSubview:self.tableView</code>, 没执行完) &ndash;></li>
<li>第二次执行tableview getter（问题在这里！第一次执行的时候没有init玩，所以又会执行一次！）-></li>
<li>回到4.viewDidLoad，这是add的subview是第二次的init而先init完的tableview &ndash;></li>
<li>回到3.第一次执行getter，（又alloc了一次tableView，这是<code>self.property</code>指向的是第一次init而后init完成的tableview））</li>
</ol>


<p>所以，显示在界面上的tableview根本不是<code>self.tableview</code>指向的tableview，故而根本没法刷新（<code>cellForRowAtIndexPath</code>，是当需要显示的时候才会调用的）。</p>

<p>那为什么把<code>[self.tableview reloadData]</code>改成<code>[_tableview
reloadData]</code>就能生效了呢？因为这样在<code>initWithNibName</code>的第一次调用setupData，就不会在reload的时候调用tableview
getter，也就不会有后面一连串的连锁反应。之后顺利在<code>viewdidload</code>的时候只调用一次，完成init。</p>

<p>知道了问题的关键，还能有各种各样让他生效的方法，就不吐槽了。</p>

<h2>正确的写法</h2>

<p>这段奇葩代码带给我最大的感触就是，不好好写规范的代码，各种问题都会坑死你。我认为规范的写法应该是</p>

<ol>
<li>不要重写getter和setter函数，使用property生成的getter和setter</li>
<li>不要在vc的init的函数里面初始化，尤其是初始化视图。而应该在viewdidload里面初始化，保证self.view已经生成。</li>
<li>应该使用自顶向下的程序设计方法，保证程序的顺序执行和层次关系。不应该出现如上程序的跳来跳去的调用。</li>
</ol>


<h2>后记</h2>

<p>帮人debug这种事情真心蛋疼，看不规范的代码像噩梦。</p>

<p>P.S.好想看objc和cocoa源码。。</p>

<p>Lancy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Associative References(关联引用)]]></title>
    <link href="http://gracelancy.com/blog/2012/11/26/objective-c-associative-references/"/>
    <updated>2012-11-26T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/11/26/objective-c-associative-references</id>
    <content type="html"><![CDATA[<h2>About</h2>

<p>在研究Objc的运行时特性的时候，发现了一个有意思的东东，Associative Reference关联引用。使用关联引用，能够模拟添加一个对象实例到一个已有的类中，能够添加存储到一个对象中而不需要改变类的定义。这个技术在你不能访问源码的时候有用，或者你只是觉得动态的增加关联很好玩。</p>

<h2>创建关联</h2>

<p>可以使用 objc_setAssociatedObject 来创建关联引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="n">overviewKey</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;One&quot;</span><span class="p">,</span> <span class="s">@&quot;Two&quot;</span><span class="p">,</span> <span class="s">@&quot;Three&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">overview</span> <span class="o">=</span> <span class="s">@&quot;First three numbers&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">objc_setAssociatedObject</span> <span class="p">(</span>
</span><span class='line'>                          <span class="n">array</span><span class="p">,</span>
</span><span class='line'>                          <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">overview</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">OBJC_ASSOCIATION_RETAIN</span>
</span><span class='line'>                          <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>key是一个 void 指针，对于每个关联，key必须唯一，通常可以使用一个 static variable.</li>
<li>police 用来指定，关联的对象是 assigned, retained, copied, 还有是否是atomically.

<ul>
<li><strong>OBJC_ASSOCIATION_ASSIGN</strong>
Specifies a weak reference to the associated object.</li>
<li><strong>OBJC_ASSOCIATION_RETAIN_NONATOMIC</strong>
Specifies a strong reference to the associated object, and that the association is not made atomically.</li>
<li><strong>OBJC_ASSOCIATION_COPY_NONATOMIC</strong>
Specifies that the associated object is copied, and that the association is not made atomically.</li>
<li><strong>OBJC_ASSOCIATION_RETAIN</strong>
Specifies a strong reference to the associated object, and that the association is made atomically.</li>
<li><strong>OBJC_ASSOCIATION_COPY</strong>
Specifies that the associated object is copied, and that the association is made atomically.</li>
</ul>
</li>
</ul>


<h2>取回关联对象</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">associatedObject</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>取消关联</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_ASSIGN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>policy可以任意设置</p>

<p>另外还可以使用 objc_removeAssociatedObjects，不过这是不被赞成的，因为他打破了所有用户的所有关联。</p>

<h2>完整的样例代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'><span class="err">……</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="n">overviewKey</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;One&quot;</span><span class="p">,</span> <span class="s">@&quot;Two&quot;</span><span class="p">,</span> <span class="s">@&quot;Three&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">overview</span> <span class="o">=</span> <span class="s">@&quot;First three numbers&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">objc_setAssociatedObject</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">array</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">,</span>
</span><span class='line'>        <span class="n">overview</span><span class="p">,</span>
</span><span class='line'>        <span class="n">OBJC_ASSOCIATION_RETAIN</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">associatedObject</span> <span class="o">=</span>
</span><span class='line'><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">objc_getAssociatedObject</span> <span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;associatedObject: %@&quot;</span><span class="p">,</span> <span class="n">associatedObject</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">objc_setAssociatedObject</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">array</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">overviewKey</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="n">OBJC_ASSOCIATION_ASSIGN</span>
</span><span class='line'>        <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：本样例代码使用了Objc2.0语法和ARC，更详细的信息，请参考官方文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 高端果粉进阶指南]]></title>
    <link href="http://gracelancy.com/blog/2012/11/22/Mac-Tips/"/>
    <updated>2012-11-22T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/11/22/Mac-Tips</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>这一篇的tip主要是介绍Mac OS X自带功能，我没有说的，一定是因为我觉得没什么用，或者是太简单了，大家都会。然后再挖一个坑，以后再写一篇介绍mac下的高效APP。</p>

<h2>基础类</h2>

<h4>1. 截图</h4>

<ul>
<li>shift+command+3全屏截图到桌面文件</li>
<li>shift+command+4选择截图到桌面文件</li>
<li>shift+control+command+3</li>
<li>shift+control+command+4到剪切板</li>
<li>选择截图的时候按住option有不一样的效果</li>
</ul>


<h4>2. 窗口控制</h4>

<p>command+tab可以切换程序
command+· 可以在程序内切换窗口
mission control和app expose就不多说了，还有各种手势操作要开足，默认是没有四指的。</p>

<h4>3. 登陆项</h4>

<p>在用户控制里面，另外在dock上右键也可以找到“登录时打开”</p>

<h4>4. Finder path</h4>

<pre><code>defaults write com.apple.finder PathBarRootAtHome -bool TRUE;killall Finder
</code></pre>

<h4>5. Lock files</h4>

<p>cmd+i，可以lock files
打开文件，点击窗口最上面的文件名，也可以lock</p>

<h4>6. 拷贝文字样式</h4>

<ul>
<li>opt+cmd+c</li>
<li>opt+cmd+v</li>
</ul>


<h2>效率类</h2>

<h4>1. 全屏模式下使用dock</h4>

<p>把鼠标移动到dock原先在的边缘，停顿，再往边缘推一下</p>

<h4>2. 把窗口移到另一个桌面</h4>

<p>拖动窗口，到屏幕边缘，停顿一秒，就会切换桌面。delay的时间还可以改变用如下命令改变</p>

<pre><code>defaults write com.apple.dock workspaces-edge-delay -float 0.15;killall Dock
</code></pre>

<p>也可以用如下命令取消</p>

<pre><code>defaults delete com.apple.dock workspaces-edge-delay;killall Dock
</code></pre>

<h4>3.多手势操作，惯性拖动</h4>

<p>其他的不多说，设置里面的trackpad里面有视频演示。重点说一个我觉得很好用的，大家知道三个手指能拖动窗口（物体），如果你三个手指抓住之后，往一个方向甩出去，同时变成一个手指，就会发现移动带上了惯性。这个tip在使用双屏幕的时候，尤其好用，手指一甩，窗口就飞到另一个屏幕，还有惯性动画，碉堡了</p>

<h4>4. 通知中心,Do not disturb me</h4>

<p>打开通知中心，往下拖一下，就能看见那个开关了。也可以option然后点击通知中心的按钮。</p>

<h4>5. Mission Control 也可以快速查看</h4>

<p>mission control 状态下，也是可以按space来进行快速预览的，还可以双指（鼠标滚轮）向上滑动查看同一个应用的多个窗口</p>

<h4>6. 一次显示多个文件的信息</h4>

<p>cmd+i显示文件信息; opt+cmd+i显示多个文件的信息</p>

<h4>7. 给文件加tag</h4>

<p>这是一个牛逼的功能啦，打开一个文件的信息页面(cmd+i)，有一个spotlight注释。</p>

<h4>8. 给文件加label</h4>

<p>右键可以给文件加颜色label，然后在spotlight中输入：label:blue（或 label:蓝色）就可以看见相应的文件，支持智能文件夹。</p>

<h4>9. 拖动文件时，立即打开文件夹</h4>

<p>拖动文件到另一个文件夹的时候，如果停在上面一会儿，就会打开该文件夹，如果你等不及，可以按一下space，就会立刻打开。</p>

<h4>10. 高端mac pdf用户</h4>

<p>preview app是可以annotating pdf的，而且还可以通过摄像头提取签名附近去。他还可以将不同的pdf合并在一起，添加图片，和密码保护。</p>

<h4>11. focus single windows</h4>

<p>这是一个有意思的tip，能让你点击dock上的icon，就会自动隐藏其他的app，这样，同时就只会有一个app在最前面。对于注意力难以集中，发现其他的东西分散了你的注意力的用户可以尝试，（其实也可以使用全屏模式）。</p>

<pre><code>defaults write com.apple.dock single-app -bool TRUE;killall Dock 
//关闭
defaults delete com.apple.dock single-app;killall Dock 
</code></pre>

<h4>12. 让quick look能看更多的文件格式</h4>

<p><a href="http://qlplugins.com/">http://qlplugins.com/</a></p>

<h4>13. 一个秘密的手势，回到前一个桌面</h4>

<p>四指轻拍两下切换最近桌面，（老实说不是很好用。。）</p>

<pre><code>defaults write com.apple.dock double-tap-jump-back -bool TRUE;killall Dock
</code></pre>

<h2>美化类</h2>

<h4>1. 给任何文件换图标</h4>

<p>非常简单，用预览打开一个图片，command+a, command+c。然后选中你想换图标的文件command+i显示信息，选中最上面的图标（会有高亮框），然后command+v！
或者干脆直接把文件直接拖到信息界面的icon哪里！</p>

<h4>2. 给dock的文件夹加高亮框</h4>

<pre><code>//开启
defaults write com.apple.dock mouse-over-hilite-stack -bool TRUE;killall Dock
//关闭
defaults delete com.apple.dock mouse-over-hilite-stack;killall Dock
</code></pre>

<h4>3. 替换Dashboard和Mission control的壁纸</h4>

<pre><code>/System/Library/CoreService/Dock.app/Contents/Resource
</code></pre>

<p>替换这个defaultdesktop.png和pirelli.png
PS:注意安全，最好上备份，Time Machine</p>

<h4>4. 在桌面播放动态屏保</h4>

<pre><code>nohup /System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -module Arabesque -background
</code></pre>

<p>其中Arabesque可以替换为/System/Library/Screen Savers里面的任意</p>

<p>这样关掉</p>

<pre><code>killall ScreenSaverEngine 
</code></pre>

<p>PS.不会开机启动，想启动载入的可以写个脚本</p>

<h4>5. 更改登陆界面壁纸</h4>

<pre><code>/System/Library/Frameworks/AppKit.framework/Versions/C/Resources/NSTexturedFullScreenBackgroundColor.png
</code></pre>

<h4>6. 第三种最小化动画</h4>

<pre><code>defaults write com.apple.dock mineffect -string suck;killall Dock

defaults delte com.apple.dock mineffect;killall Dock
</code></pre>

<h2>安全类</h2>

<h4>1. 可以用硬盘工具disk utility制作带密码保护的u盘</h4>

<p>打开disk utility你就知道了</p>

<h4>2. 安全倾倒垃圾箱</h4>

<p>按住command右键垃圾箱，这样就不能用软件恢复了</p>

<h4>3. 管理员密码非常重要</h4>

<p>呵呵呵呵呵，我发现很多人对电脑的管理员密码是无动于衷的，甚至我认识不少大牛都这样，把密码设成一位，或者随意告诉别人。你们难道不知道keychain里面是存有你们所有的密码的么？可以通过鉴定显示所有密码哦~safari也可以哦~你的gmail，支付宝，网银全部都在里面哦</p>

<h4>4. 一个牛逼的功能FileVault</h4>

<p>国防级别的实时档案加密，保证你的硬盘不会被破解，没有你的密码，即使把硬盘拆了放到另一个电脑上也读取不出任何内容。
PS. 用这个功能会降低运行速度（因为是实时加密），所以如果你没有什么不可告人的秘密，还是别蛋疼了。</p>

<h4>5. Time machine备份时间设定</h4>

<pre><code>sudo defaults write /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval -int 7200
// 调回默认
sudo defaults delete /System/Library/LaunchDaemons/com.apple.backupd-auto StartInterval
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone交互设计心得点滴]]></title>
    <link href="http://gracelancy.com/blog/2012/11/19/iPhone-Interaction-design/"/>
    <updated>2012-11-19T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/11/19/iPhone-Interaction-design</id>
    <content type="html"><![CDATA[<ul>
<li> 移动应用之所以被称为移动应用正是因为用户正在移动，地铁，咖啡店，排队，候车等任何时候都有可能让用户打开你的APP，也同时有可能打断。你的用户不可能像设计师你一样全神贯注的把玩你的应用，周围的环境（还有其他的应用推送，来电，短信）随时都在争夺用户的注意力，所以移动应用的设计，不论是视觉设计，还是应用的交互设计，都必须简洁简洁再简洁，less is more。</li>
<li> 移动应用的上下文环境，即移动场景是一个考量用户需求的重要因素，用户启动一个APP的动机和心态无非三种1.我有个小任务要做；2.我想看看附近的情况；3。我无聊（不要再欺骗自己了，你真的很无聊）</li>
<li> 你可能会说，我的应用比他的好，为什么用户不来用我的？那是因为用户有他自身的习惯，改变习惯是要付出代价的，除非你的应用足够好到抵消这个代价。我们常常想要做出与众不同的设计，但是交互设计和艺术设计最大的区别就在于我们更关心的是用户，用户习惯是必须要考量的因素，不要为了设计而设计。</li>
<li> 单手操作是iPhone之所以是3.5寸屏幕的重要原因，因为iPhone就是被设计出来单手操作的，你的另一只手，或者另一半大脑还要处理一些周围环境的事情。所以将重要的经常需要使用的按钮放在单手拇指最容易操作的地方是一个设计的技巧。对于右手来说，这个地方是屏幕中间到左下角。然而一个需要注意的是事实是，你完全不能确定用户会用哪一只手来操作，对此有一种设计，就是横跨整个屏幕宽的按钮。</li>
<li> 一个保持应用良好形象的方法就是不使用滚动条，这样会让你的应用更象实体设备。而你恐怕不会知道用户对滚动的信息注意力有多低，实际上每一次滚动都需要多费一次脑，一次力。当然你知道我的意思不是完全抵制，只是作为设计师，你应该尽可能消灭多余的体力和脑力劳动。</li>
<li> 在我们做应用设计之前，首先应该了解目标客户是那些，他们有哪些需求，模拟用户使用app的流程和逻辑。简单的说，研究用户是在app设计之前就应该做的事，而不是上手就开始设计应用，这会让你偏离群众。</li>
<li> 如果不是程序很大，需要载入很长时间，就不要滥用开场动画了，你做的不是游戏。</li>
<li> Metro的设计很酷，是的，我也这么认为。你可以使用一些Metro的设计风格和设计元素，但千万不要以为自己真的是在给Windows Phone做应用。（或者android</li>
<li> 易发现的手势来源于经验，如果有些手势在现实世界中可以做，或是在桌面软件控制可以做，那么人就会同样在触屏上试试能不能做。</li>
<li> 设计手势的一个好方法就是观察用户的期望，比如在内置日历中，用户会期望通过左右滑动来切换月份。（可惜你只能按箭头）</li>
<li> 手势操作应该做操作的一种补充，而不是主要的操作模式，因为他往往并不是那么直观，也不容易被用户发现，如果单单只有手势操作，会降低易用性。所谓的补充，就是当一些操作过于耗时或是要经常重复的时候，设计一个简洁的手势作为操作的一种快捷方式，就能提高可用性。</li>
<li> 关于摇动这个手势，标准的用法应该是撤销，<del>因为当用户不小心做了一个误操作之后，他会NO NO NO的大喊，然后晃动手机，这时候弹出一个是否撤销，不是很贴心么。但是千万不要把摇动手势来做破坏性的操作，比如删除或者清空什么的，千万不要忘了你拿着的是一个移动电话，移动的，亲。</del> （用户完全没有这个摇动撤销的习惯，不要违背用户的习惯，在能看见的地方显示撤销按钮，摇动一般作为一种有趣的附加操作）</li>
<li> 在3.5寸屏上面使用2根手指或以上的手势，就需要你使用两只手。而且，除了缩放操作之外，2根手指还没有任何一种手势是被人所熟悉的。（你知道地图应用里面两根手指单击可以缩小么？）</li>
<li> 自卫设计是为了防止误操作，通过需要更复杂的一些操作来完成诸如删除之类的破坏性功能，iPhone的标准删除操作，就需要三个流程。不过，防止误操作的真正救命稻草是提供撤销。Google在这一点上做得很好，他的决定性和破坏性操作，都会产生一个临时的撤销选项，比如当你把情书发给错误的女孩，你还有那么几秒钟时间可以紧急抢救一把。</li>
<li> 慎用模态警告框，因为他会打断操作，非真正紧急必要的情况，尽可能少的使用。可以用动作选单（iPad可以使用popover）来取代比如确认删除一类的操作。但是用弹出警告框来让用户打分评论，真的，这样做不够意思。（虽然貌似挺有效）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac &#038; iOS的中文分词]]></title>
    <link href="http://gracelancy.com/blog/2012/10/22/mac%3Aios-string-tokenizer/"/>
    <updated>2012-10-22T00:00:00+08:00</updated>
    <id>http://gracelancy.com/blog/2012/10/22/mac:ios-string-tokenizer</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>封装了<code>CFStringTokenizer</code>的NSString Category，可以方便的应用于Mac或者iOS APP， 其不但支持西方语言，更支持中文和日文这样没有空格分词的语言。</p>

<h2>使用方法</h2>

<p>导入<strong>NSString + Tokenize.h</strong> 和 <strong>NSString + Tokenize.m</strong>后，
即可使用这两个接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">arrayWithWordTokenize</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">separatedStringWithSeparator:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">separator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>示例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;NSString+Tokenize.h&quot;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">tapTokenizeButton:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">inputString</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">inputTextView</span><span class="p">.</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;TokensArray = %@&quot;</span><span class="p">,</span> <span class="n">inputString</span><span class="p">.</span><span class="n">arrayWithWordTokenize</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">outputTextView</span> <span class="nl">setString:</span><span class="p">[</span><span class="n">inputString</span> <span class="nl">separatedStringWithSeparator:</span><span class="s">@&quot;/&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
